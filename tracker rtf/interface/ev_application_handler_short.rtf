{\rtf1\ansi\ansicpg1252\deflang1033{\fonttbl{\f0\fscript\fcharset0 Courier;}}{\colortbl ;\red0\green0\blue0;\red255\green255\blue255;\red128\green0\blue0;\red0\green0\blue255;\red0\green128\blue0;\red0\green0\blue128;}
{\cf3\f0\fs16 {\tab}{\tab}{\tab}-- Automatic generation produced by ISE Eiffel --
{\line}
{{\b\cf6 note}{\line}
{\tab}{\cf1 description}{\cf1 :} "[{\line}
{\tab}{\tab}		Before SCOOP appeared, the event loop of a graphical application would run in the main thread{\line}
{\tab}{\tab}		after creating the initial graphical objects. That thread would enter an event loop to process{\line}
{\tab}{\tab}		new events. That thread was also called the GUI thread.{\line}
{\tab}{\tab}		{\line}
{\tab}{\tab}		In SCOOP mode this doesn't work because a processor stuck in a loop cannot process any logged{\line}
{\tab}{\tab}		calls. In other words, it means that you cannot perform calls on a separate widget my_widget{\line}
{\tab}{\tab}		as they will be logged but only applied after the processor has completed its event loop and{\line}
{\tab}{\tab}		exited its current application of a call.{\line}
{\tab}{\tab}{\line}
{\tab}{\tab}		To circumvent this, we require the following guidelines. A GUI processor is created, this is{\line}
{\tab}{\tab}		where the EV_APPLICATION object and all GUI objects are created. The GUI processor is similar{\line}
{\tab}{\tab}		to the GUI thread in non-SCOOP mode. However we require the GUI processor to not do anything{\line}
{\tab}{\tab}		else after calling {\cf1 \{}{\cf4 EV_APPLICATION}{\cf1 \}}{\b\cf1 .}{\cf5 launch} so that it enters the idle mode of SCOOP processors.{\line}
{\tab}{\tab}{\line}
{\tab}{\tab}		Internally when calling {\cf5 launch} from the EV_APPLICATION instance, we will create a separate{\line}
{\tab}{\tab}		instance of EV_APPLICATION_HANDLER which will continuously log calls to process events on the{\line}
{\tab}{\tab}		GUI processor. Since the GUI processor is idle, it will be able to log and apply calls coming{\line}
{\tab}{\tab}		from any other separate processors that wants to interact with the GUI.{\line}
{\tab}]"{\line}
{\tab}{\cf1 date}{\cf1 :} "$Date: 2015-06-25 15:41:43 -0700 (Thu, 25 Jun 2015) $"{\line}
{\tab}{\cf1 revision}{\cf1 :} "$Revision: 97568 $"{\line}
{\line}
{\b\cf6 frozen} {\b\cf6 class} {\b\cf6 interface}{\line}
{\tab}{\cf4 EV_APPLICATION_HANDLER}{\line}
{\line}
{\b\cf6 create} {\cf1 \{}{\cf4 EV_APPLICATION}{\cf1 \}}{\line}
{\tab}{\cf5 make}{\line}
{\line}
{\b\cf6 note}{\line}
{\tab}{\cf1 copyright}{\cf1 :} "Copyright (c) 1984-2015, Eiffel Software and others"{\line}
{\tab}{\cf1 license}{\cf1 :} "Eiffel Forum License v2 (see http://www.eiffel.com/licensing/forum.txt)"{\line}
{\tab}{\cf1 source}{\cf1 :} "[{\line}
{\tab}{\tab}Eiffel Software{\line}
{\tab}{\tab}5949 Hollister Ave., Goleta, CA 93117 USA{\line}
{\tab}{\tab}Telephone 805-685-1006, Fax 805-685-6869{\line}
{\tab}{\tab}Website http://www.eiffel.com{\line}
{\tab}{\tab}Customer support http://support.eiffel.com{\line}
{\tab}]"{\line}
{\line}
{\b\cf6 end} {\cf3 --} {\cf3 class }{\cf4 EV_APPLICATION_HANDLER}}
{\line}
{\cf3 {\tab}{\tab}{\tab}-- Generated by ISE Eiffel --}
{\line}
{\cf3{\tab}{\tab}{\tab}-- For more details: http://www.eiffel.com --}
}}
{\line}
