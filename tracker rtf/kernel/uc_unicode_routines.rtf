{\rtf1\ansi\ansicpg1252\deflang1033{\fonttbl{\f0\fscript\fcharset0 Courier;}}{\colortbl ;\red0\green0\blue0;\red255\green255\blue255;\red128\green0\blue0;\red0\green0\blue255;\red0\green128\blue0;\red0\green0\blue128;}
{\cf3\f0\fs16 {\tab}{\tab}{\tab}-- Automatic generation produced by ISE Eiffel --
{\line}
{{\b\cf6 note}{\line}
{\tab}{\cf1 description}{\cf1 :} "Unicode routines"{\line}
{\tab}{\cf1 library}{\cf1 :} "Gobo Eiffel Kernel Library"{\line}
{\tab}{\cf1 copyright}{\cf1 :} "Copyright (c) 2001-2016, Eric Bezault and others"{\line}
{\tab}{\cf1 license}{\cf1 :} "MIT License"{\line}
{\tab}{\cf1 date}{\cf1 :} "$Date: 2017-04-11 11:34:55 -0700 (Tue, 11 Apr 2017) $"{\line}
{\tab}{\cf1 revision}{\cf1 :} "$Revision: 100137 $"{\line}
{\line}
{\b\cf6 class} {\line}
{\tab}{\cf4 UC_UNICODE_ROUTINES}{\line}
{\line}
{\b\cf6 inherit}{\line}
{\tab}{\cf4 ANY}{\line}
{\line}
{\tab}{\cf4 UC_CTYPE}{\line}
{\line}
{\tab}{\cf4 KL_IMPORTED_INTEGER_ROUTINES}{\line}
{\tab}{\tab}{\b\cf6 export}{\line}
{\tab}{\tab}{\tab}{\cf1 \{}NONE{\cf1 \}} {\b\cf6 all}{\line}
{\tab}{\tab}{\b\cf6 end}{\line}
{\line}
{\tab}{\cf4 KL_SHARED_PLATFORM}{\line}
{\tab}{\tab}{\b\cf6 export}{\line}
{\tab}{\tab}{\tab}{\cf1 \{}NONE{\cf1 \}} {\b\cf6 all}{\line}
{\tab}{\tab}{\b\cf6 end}{\line}
{\line}
{\b\cf6 create} {\line}
{\tab}{\cf5 default_create}{\line}
{\line}
{\b\cf6 feature} {\cf3 --}{\cf3  Status report}{\line}
{\line}
{\tab}{\cf5 {\cf5 valid_non_surrogate_code} {\cf1 (}{\cf5 a_code}{\cf1 :} {\cf4 INTEGER_32}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Is }{\cf5 a_code}{\cf3  a valid non-surrogate unicode?}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Include all non-characters.}{\line}
{\tab}{\tab}{\b\cf6 do}{\line}
{\tab}{\tab}{\tab}{\b\cf6 Result} {\cf1 :=} {\cf1 (}{\cf5 a_code} {\cf1 >=} {\cf5 Minimum_unicode_character_code} {\b\cf6 and} {\cf5 a_code} {\cf1 <} {\cf5 Minimum_unicode_surrogate_code}{\cf1 )} {\b\cf6 or} {\cf1 (}{\cf5 a_code} {\cf1 >} {\cf5 Maximum_unicode_surrogate_code} {\b\cf6 and} {\cf5 a_code} {\cf1 <=} {\cf5 Maximum_unicode_character_code}{\cf1 )}{\line}
{\tab}{\tab}{\b\cf6 end}}{\line}
{\line}
{\tab}{\cf5 {\cf5 is_bmp_code} {\cf1 (}{\cf5 a_code}{\cf1 :} {\cf4 INTEGER_32}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Does }{\cf5 a_code}{\cf3  lie within the BMP?}{\line}
{\tab}{\tab}{\b\cf6 do}{\line}
{\tab}{\tab}{\tab}{\b\cf6 Result} {\cf1 :=} {\cf5 a_code} {\cf1 >=} {\cf5 Minimum_unicode_character_code} {\b\cf6 and} {\cf5 a_code} {\cf1 <=} {\cf5 Maximum_bmp_character_code}{\line}
{\tab}{\tab}{\b\cf6 end}}{\line}
{\line}
{\tab}{\cf5 {\cf5 valid_ascii_code} {\cf1 (}{\cf5 a_code}{\cf1 :} {\cf4 INTEGER_32}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Is }{\cf5 a_code}{\cf3  a valid ASCII code?}{\line}
{\tab}{\tab}{\b\cf6 do}{\line}
{\tab}{\tab}{\tab}{\b\cf6 Result} {\cf1 :=} {\cf1 (}{\cf5 a_code} {\cf1 >=} {\cf5 Minimum_ascii_character_code} {\b\cf6 and} {\cf5 a_code} {\cf1 <=} {\cf5 Maximum_ascii_character_code}{\cf1 )}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 definition}{\cf1 :} {\b\cf6 Result} {\cf1 =} {\cf1 (}{\cf5 a_code} {\cf1 >=} {\cf5 Minimum_ascii_character_code} {\b\cf6 and} {\cf5 a_code} {\cf1 <=} {\cf5 Maximum_ascii_character_code}{\cf1 )}{\line}
{\tab}{\tab}{\b\cf6 end}}{\line}
{\line}
{\tab}{\cf5 {\cf5 is_ascii_string} {\cf1 (}{\cf5 a_string}{\cf1 :} {\cf4 STRING_8}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Does }{\cf5 a_string}{\cf3  contain only ASCII characters?}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 a_string_not_void}{\cf1 :} {\cf5 a_string} {\cf1 /=} {\b\cf6 Void}{\line}
{\tab}{\tab}{\b\cf6 local}{\line}
{\tab}{\tab}{\tab}{\cf5 i}{\cf1 ,} {\cf5 nb}{\cf1 :} {\cf4 INTEGER_32}{\line}
{\tab}{\tab}{\b\cf6 do}{\line}
{\tab}{\tab}{\tab}{\b\cf6 if} {\b\cf6 attached} {\cf1 \{}{\cf4 UC_STRING}{\cf1 \}} {\cf5 a_string} {\b\cf6 as} a_unicode {\b\cf6 then}{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 Result} {\cf1 :=} {\cf5 a_unicode}{\b\cf1 .}{\cf5 is_ascii}{\line}
{\tab}{\tab}{\tab}{\b\cf6 else}{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 Result} {\cf1 :=} {\b\cf6 True}{\line}
{\tab}{\tab}{\tab}{\tab}{\cf5 nb} {\cf1 :=} {\cf5 a_string}{\b\cf1 .}{\cf5 count}{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 from}{\line}
{\tab}{\tab}{\tab}{\tab}{\tab}{\cf5 i} {\cf1 :=} 1{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 until}{\line}
{\tab}{\tab}{\tab}{\tab}{\tab}{\cf5 i} {\cf1 >} {\cf5 nb}{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 loop}{\line}
{\tab}{\tab}{\tab}{\tab}{\tab}{\b\cf6 if} {\cf5 Maximum_ascii_character_code} {\cf1 <} {\cf5 a_string}{\b\cf1 .}{\cf5 item_code}{\cf1  }{\cf1 (}{\cf5 i}{\cf1 )} {\b\cf6 then}{\line}
{\tab}{\tab}{\tab}{\tab}{\tab}{\tab}{\b\cf6 Result} {\cf1 :=} {\b\cf6 False}{\line}
{\tab}{\tab}{\tab}{\tab}{\tab}{\tab}{\cf5 i} {\cf1 :=} {\cf5 nb} {\cf1 +} 1{\line}
{\tab}{\tab}{\tab}{\tab}{\tab}{\b\cf6 else}{\line}
{\tab}{\tab}{\tab}{\tab}{\tab}{\tab}{\cf5 i} {\cf1 :=} {\cf5 i} {\cf1 +} 1{\line}
{\tab}{\tab}{\tab}{\tab}{\tab}{\b\cf6 end}{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 end}{\line}
{\tab}{\tab}{\tab}{\b\cf6 end}{\line}
{\tab}{\tab}{\b\cf6 end}}{\line}
{\line}
{\tab}{\cf5 {\cf5 code_to_string} {\cf1 (}{\cf5 a_code}{\cf1 :} {\cf4 INTEGER_32}{\cf1 )}{\cf1 :} {\cf4 STRING_8}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Return a string with }{\cf5 a_code}{\cf3  as its single character.}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  (If the character code is bigger than the maximum for}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  CHARACTER, the dynamic type of the result will be UC_STRING}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  or a descendant.)}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 a_code_valid}{\cf1 :} {\cf5 valid_code}{\cf1  }{\cf1 (}{\cf5 a_code}{\cf1 )}{\line}
{\tab}{\tab}{\b\cf6 local}{\line}
{\tab}{\tab}{\tab}{\cf5 a_unicode}{\cf1 :} {\cf4 UC_UTF8_STRING}{\line}
{\tab}{\tab}{\b\cf6 do}{\line}
{\tab}{\tab}{\tab}{\b\cf6 if} {\cf5 a_code} {\cf1 <=} {\cf5 Platform}{\b\cf1 .}{\cf5 Maximum_character_code} {\b\cf6 then}{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 create} {\b\cf6 Result}{\b\cf1 .}{\cf5 make}{\cf1  }{\cf1 (}1{\cf1 )}{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 Result}{\b\cf1 .}{\cf5 append_character}{\cf1  }{\cf1 (}{\cf5 Integer_}{\b\cf1 .}{\cf5 to_character}{\cf1  }{\cf1 (}{\cf5 a_code}{\cf1 )}{\cf1 )}{\line}
{\tab}{\tab}{\tab}{\b\cf6 else}{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 create} {\cf5 a_unicode}{\b\cf1 .}{\cf5 make}{\cf1  }{\cf1 (}1{\cf1 )}{\line}
{\tab}{\tab}{\tab}{\tab}{\cf5 a_unicode}{\b\cf1 .}{\cf5 append_item_code}{\cf1  }{\cf1 (}{\cf5 a_code}{\cf1 )}{\line}
{\tab}{\tab}{\tab}{\tab}{\b\cf6 Result} {\cf1 :=} {\cf5 a_unicode}{\line}
{\tab}{\tab}{\tab}{\b\cf6 end}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 string_not_void}{\cf1 :} {\b\cf6 Result} {\cf1 /=} {\b\cf6 Void}{\line}
{\tab}{\tab}{\tab}{\cf1 count_set}{\cf1 :} {\b\cf6 Result}{\b\cf1 .}{\cf5 count} {\cf1 =} 1{\line}
{\tab}{\tab}{\tab}{\cf1 code_set}{\cf1 :} {\b\cf6 Result}{\b\cf1 .}{\cf5 item_code}{\cf1  }{\cf1 (}1{\cf1 )} {\cf1 =} {\cf5 a_code}{\line}
{\tab}{\tab}{\b\cf6 end}}{\line}
{\tab}{\line}
{\b\cf6 end} {\cf3 --} {\cf3 class }{\cf4 UC_UNICODE_ROUTINES}}
{\line}
{\cf3 {\tab}{\tab}{\tab}-- Generated by ISE Eiffel --}
{\line}
{\cf3{\tab}{\tab}{\tab}-- For more details: http://www.eiffel.com --}
}}
{\line}
