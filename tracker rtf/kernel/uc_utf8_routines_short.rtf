{\rtf1\ansi\ansicpg1252\deflang1033{\fonttbl{\f0\fscript\fcharset0 Courier;}}{\colortbl ;\red0\green0\blue0;\red255\green255\blue255;\red128\green0\blue0;\red0\green0\blue255;\red0\green128\blue0;\red0\green0\blue128;}
{\cf3\f0\fs16 {\tab}{\tab}{\tab}-- Automatic generation produced by ISE Eiffel --
{\line}
{{\b\cf6 note}{\line}
{\tab}{\cf1 description}{\cf1 :} "UTF-8 encoding routines"{\line}
{\tab}{\cf1 library}{\cf1 :} "Gobo Eiffel Kernel Library"{\line}
{\tab}{\cf1 copyright}{\cf1 :} "Copyright (c) 2001-2012, Eric Bezault and others"{\line}
{\tab}{\cf1 license}{\cf1 :} "MIT License"{\line}
{\tab}{\cf1 date}{\cf1 :} "$Date: 2016-05-06 12:15:38 -0700 (Fri, 06 May 2016) $"{\line}
{\tab}{\cf1 revision}{\cf1 :} "$Revision: 98678 $"{\line}
{\line}
{\b\cf6 class} {\b\cf6 interface}{\line}
{\tab}{\cf4 UC_UTF8_ROUTINES}{\line}
{\line}
{\b\cf6 create} {\line}
{\tab}{\cf5 default_create}{\line}
{\line}
{\b\cf6 feature} {\cf3 --}{\cf3  Status report}{\line}
{\line}
{\tab}{\cf5 {\cf5 valid_utf8} {\cf1 (}{\cf5 a_string}{\cf1 :} {\cf4 STRING_8}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Are the bytes in }{\cf5 a_string}{\cf3  a valid UTF-8 encoding?}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 a_string_not_void}{\cf1 :} {\cf5 a_string} {\cf1 /=} {\b\cf6 Void}{\line}
{\tab}{\tab}{\tab}{\cf1 a_string_is_string}{\cf1 :} {\cf5 Any_}{\b\cf1 .}{\cf5 same_types}{\cf1  }{\cf1 (}{\cf5 a_string}{\cf1 ,} ""{\cf1 )}{\line}
}{\line}
{\tab}{\cf5 {\cf5 is_encoded_first_byte} {\cf1 (}{\cf5 a_byte}{\cf1 :} {\cf4 CHARACTER_8}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Is }{\cf5 a_byte}{\cf3  the first byte in UTF-8 encoding?}{\line}
}{\line}
{\tab}{\cf5 {\cf5 is_encoded_next_byte} {\cf1 (}{\cf5 a_byte}{\cf1 :} {\cf4 CHARACTER_8}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Is }{\cf5 a_byte}{\cf3  one of the next bytes in UTF-8 encoding?}{\line}
}{\line}
{\tab}{\cf5 {\cf5 is_encoded_second_byte} {\cf1 (}{\cf5 a_byte}{\cf1 ,} {\cf5 a_first_byte}{\cf1 :} {\cf4 CHARACTER_8}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Is }{\cf5 a_byte}{\cf3  a valid second byte in UTF-8 encoding?}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 valid_first_byte}{\cf1 :} {\cf5 is_encoded_first_byte}{\cf1  }{\cf1 (}{\cf5 a_first_byte}{\cf1 )}{\line}
}{\line}
{\tab}{\cf5 {\cf5 is_endian_detection_character} {\cf1 (}{\cf5 a_first}{\cf1 ,} {\cf5 a_second}{\cf1 ,} {\cf5 a_third}{\cf1 :} {\cf4 CHARACTER_8}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Is this sequence a UTF-8 Byte Order Marker (BOM)?}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 result_start}{\cf1 :} {\b\cf6 Result} {\b\cf6 implies} {\cf5 is_endian_detection_character_start}{\cf1  }{\cf1 (}{\cf5 a_first}{\cf1 ,} {\cf5 a_second}{\cf1 )}{\line}
}{\line}
{\tab}{\cf5 {\cf5 is_endian_detection_character_start} {\cf1 (}{\cf5 a_first}{\cf1 ,} {\cf5 a_second}{\cf1 :} {\cf4 CHARACTER_8}{\cf1 )}{\cf1 :} {\cf4 BOOLEAN}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Are these characters the start of a UTF-8 encoded Byte Order Marker (BOM)?}{\line}
}{\tab}{\line}
{\b\cf6 feature} {\cf3 --}{\cf3  Access}{\line}
{\line}
{\tab}{\cf5 {\cf5 encoded_first_value} {\cf1 (}{\cf5 a_byte}{\cf1 :} {\cf4 CHARACTER_8}{\cf1 )}{\cf1 :} {\cf4 INTEGER_32}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Value encoded in first byte}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 is_encoded_first_byte}{\cf1 :} {\cf5 is_encoded_first_byte}{\cf1  }{\cf1 (}{\cf5 a_byte}{\cf1 )}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 value_positive}{\cf1 :} {\b\cf6 Result} {\cf1 >=} 0{\line}
{\tab}{\tab}{\tab}{\cf1 value_small_enough}{\cf1 :} {\b\cf6 Result} {\cf1 <} 128{\line}
}{\line}
{\tab}{\cf5 {\cf5 encoded_next_value} {\cf1 (}{\cf5 a_byte}{\cf1 :} {\cf4 CHARACTER_8}{\cf1 )}{\cf1 :} {\cf4 INTEGER_32}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Value encoded in one of the next bytes}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 is_encoded_next_byte}{\cf1 :} {\cf5 is_encoded_next_byte}{\cf1  }{\cf1 (}{\cf5 a_byte}{\cf1 )}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 value_positive}{\cf1 :} {\b\cf6 Result} {\cf1 >=} 0{\line}
{\tab}{\tab}{\tab}{\cf1 value_small_enough}{\cf1 :} {\b\cf6 Result} {\cf1 <} 64{\line}
}{\tab}{\line}
{\b\cf6 feature} {\cf3 --}{\cf3  Measurement}{\line}
{\line}
{\tab}{\cf5 {\cf5 encoded_byte_count} {\cf1 (}{\cf5 a_byte}{\cf1 :} {\cf4 CHARACTER_8}{\cf1 )}{\cf1 :} {\cf4 INTEGER_32}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Number of bytes which were necessary to encode}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  the unicode character whose first byte is }{\cf5 a_byte}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 is_encoded_first_byte}{\cf1 :} {\cf5 is_encoded_first_byte}{\cf1  }{\cf1 (}{\cf5 a_byte}{\cf1 )}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 encoded_byte_code_large_enough}{\cf1 :} {\b\cf6 Result} {\cf1 >=} 1{\line}
{\tab}{\tab}{\tab}{\cf1 encoded_byte_code_small_enough}{\cf1 :} {\b\cf6 Result} {\cf1 <=} 4{\line}
}{\line}
{\tab}{\cf5 {\cf5 substring_byte_count} {\cf1 (}{\cf5 a_string}{\cf1 :} {\cf4 READABLE_STRING_GENERAL}{\cf1 ;} {\cf5 start_index}{\cf1 ,} {\cf5 end_index}{\cf1 :} {\cf4 INTEGER_32}{\cf1 )}{\cf1 :} {\cf4 INTEGER_32}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Number of bytes needed to encode characters  of}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  }{\cf5 a_string}{\cf3  between }{\cf5 start_index}{\cf3  and }{\cf5 end_index}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  inclusive with the UTF-8 encoding}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 a_string_not_void}{\cf1 :} {\cf5 a_string} {\cf1 /=} {\b\cf6 Void}{\line}
{\tab}{\tab}{\tab}{\cf1 valid_start_index}{\cf1 :} 1 {\cf1 <=} {\cf5 start_index}{\line}
{\tab}{\tab}{\tab}{\cf1 valid_end_index}{\cf1 :} {\cf5 end_index} {\cf1 <=} {\cf5 a_string}{\b\cf1 .}{\cf5 count}{\line}
{\tab}{\tab}{\tab}{\cf1 meaningful_interval}{\cf1 :} {\cf5 start_index} {\cf1 <=} {\cf5 end_index} {\cf1 +} 1{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 substring_byte_count_positive}{\cf1 :} {\b\cf6 Result} {\cf1 >=} 0{\line}
}{\line}
{\tab}{\cf5 {\cf5 code_byte_count} {\cf1 (}{\cf5 a_code}{\cf1 :} {\cf4 INTEGER_32}{\cf1 )}{\cf1 :} {\cf4 INTEGER_32}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Number of bytes needed to encode unicode character}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  of code }{\cf5 a_code}{\cf3  with the UTF-8 encoding}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 valid_code}{\cf1 :} {\cf5 Unicode}{\b\cf1 .}{\cf5 valid_non_surrogate_code}{\cf1  }{\cf1 (}{\cf5 a_code}{\cf1 )}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 code_byte_count_large_enough}{\cf1 :} {\b\cf6 Result} {\cf1 >=} 1{\line}
{\tab}{\tab}{\tab}{\cf1 code_byte_count_small_enough}{\cf1 :} {\b\cf6 Result} {\cf1 <=} 4{\line}
}{\line}
{\tab}{\cf5 {\cf5 character_byte_count} {\cf1 (}{\cf5 c}{\cf1 :} {\cf4 CHARACTER_8}{\cf1 )}{\cf1 :} {\cf4 INTEGER_32}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Number of bytes needed to encode character}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  }{\cf5 c}{\cf3  with the UTF-8 encoding}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 character_byte_count_large_enough}{\cf1 :} {\b\cf6 Result} {\cf1 >=} 1{\line}
{\tab}{\tab}{\tab}{\cf1 character_byte_count_small_enough}{\cf1 :} {\b\cf6 Result} {\cf1 <=} 4{\line}
}{\tab}{\line}
{\b\cf6 feature} {\cf3 --}{\cf3  Conversion}{\line}
{\line}
{\tab}{\cf5 {\cf5 to_utf8} {\cf1 (}{\cf5 a_string}{\cf1 :} {\cf4 STRING_8}{\cf1 )}{\cf1 :} {\cf4 STRING_8}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  New STRING made up of bytes corresponding to}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  the UTF-8 representation of }{\cf5 a_string}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 a_string_not_void}{\cf1 :} {\cf5 a_string} {\cf1 /=} {\b\cf6 Void}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 to_utf8_not_void}{\cf1 :} {\b\cf6 Result} {\cf1 /=} {\b\cf6 Void}{\line}
{\tab}{\tab}{\tab}{\cf1 string_type}{\cf1 :} {\cf5 Any_}{\b\cf1 .}{\cf5 same_types}{\cf1  }{\cf1 (}{\b\cf6 Result}{\cf1 ,} ""{\cf1 )}{\line}
{\tab}{\tab}{\tab}{\cf1 valid_utf8}{\cf1 :} {\cf5 valid_utf8}{\cf1  }{\cf1 (}{\b\cf6 Result}{\cf1 )}{\line}
}{\tab}{\line}
{\b\cf6 feature} {\cf3 --}{\cf3  Element change}{\line}
{\line}
{\tab}{\cf5 {\cf5 append_code_to_utf8} {\cf1 (}{\cf5 a_utf8}{\cf1 :} {\cf4 STRING_8}{\cf1 ;} {\cf5 a_code}{\cf1 :} {\cf4 INTEGER_32}{\cf1 )}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  Add UTF-8 encoded character of code }{\cf5 a_code}{\line}
{\tab}{\tab}{\tab}{\cf3 --}{\cf3  at the end of }{\cf5 a_utf8}{\cf3 .}{\line}
{\tab}{\tab}{\b\cf6 require}{\line}
{\tab}{\tab}{\tab}{\cf1 a_utf8_not_void}{\cf1 :} {\cf5 a_utf8} {\cf1 /=} {\b\cf6 Void}{\line}
{\tab}{\tab}{\tab}{\cf1 a_utf8_is_string}{\cf1 :} {\cf5 Any_}{\b\cf1 .}{\cf5 same_types}{\cf1  }{\cf1 (}{\cf5 a_utf8}{\cf1 ,} ""{\cf1 )}{\line}
{\tab}{\tab}{\tab}{\cf1 a_utf8_valid}{\cf1 :} {\cf5 valid_utf8}{\cf1  }{\cf1 (}{\cf5 a_utf8}{\cf1 )}{\line}
{\tab}{\tab}{\tab}{\cf1 valid_code}{\cf1 :} {\cf5 Unicode}{\b\cf1 .}{\cf5 valid_non_surrogate_code}{\cf1  }{\cf1 (}{\cf5 a_code}{\cf1 )}{\line}
{\tab}{\tab}{\b\cf6 ensure}{\line}
{\tab}{\tab}{\tab}{\cf1 a_utf8_valid}{\cf1 :} {\cf5 valid_utf8}{\cf1  }{\cf1 (}{\cf5 a_utf8}{\cf1 )}{\line}
}{\tab}{\line}
{\b\cf6 end} {\cf3 --} {\cf3 class }{\cf4 UC_UTF8_ROUTINES}}
{\line}
{\cf3 {\tab}{\tab}{\tab}-- Generated by ISE Eiffel --}
{\line}
{\cf3{\tab}{\tab}{\tab}-- For more details: http://www.eiffel.com --}
}}
{\line}
