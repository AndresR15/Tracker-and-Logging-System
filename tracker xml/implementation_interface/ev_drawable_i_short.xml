<system>
<keyword>note</keyword>
	<indexing_tag>description</indexing_tag><symbol>:</symbol> <string>&quot;EiffelVision drawable. Implementation interface.&quot;</string>
	<indexing_tag>legal</indexing_tag><symbol>:</symbol> <string>&quot;See notice at end of class.&quot;</string>
	<indexing_tag>status</indexing_tag><symbol>:</symbol> <string>&quot;See notice at end of class.&quot;</string>
	<indexing_tag>keywords</indexing_tag><symbol>:</symbol> <string>&quot;figures, primitives, drawing, line, point, ellipse&quot;</string>
	<indexing_tag>date</indexing_tag><symbol>:</symbol> <string>&quot;$Date: 2011-01-13 15:53:42 -0800 (Thu, 13 Jan 2011) $&quot;</string>
	<indexing_tag>revision</indexing_tag><symbol>:</symbol> <string>&quot;$Revision: 85350 $&quot;</string>

<keyword>deferred</keyword> <keyword>class</keyword> <keyword>interface</keyword>
	<class><location>../implementation_interface/ev_drawable_i_short.xml</location>EV_DRAWABLE_I</class>

<keyword>feature</keyword> <comment>--</comment><comment> Access</comment>

	<anchor>f_width</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_width</location>width</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Horizontal size in pixels.</comment>
		<keyword>ensure</keyword>
			<tag>positive</tag><symbol>:</symbol> <keyword>Result</keyword> <symbol>&gt;</symbol> <number>0</number>

	<anchor>f_height</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_height</location>height</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Vertical size in pixels.</comment>
		<keyword>ensure</keyword>
			<tag>positive</tag><symbol>:</symbol> <keyword>Result</keyword> <symbol>&gt;</symbol> <number>0</number>

	<anchor>f_line_width</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_line_width</location>line_width</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Line thickness.</comment>

	<anchor>f_drawing_mode</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_drawing_mode</location>drawing_mode</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Logical operation on pixels when drawing.</comment>

	<anchor>f_clip_area</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_clip_area</location>clip_area</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><location>../interface/ev_rectangle_short.xml</location>EV_RECTANGLE</class>
			<comment>--</comment><comment> Clip area used to clip drawing.</comment>
			<comment>--</comment><comment> If set to Void, no clipping is applied.</comment>

	<anchor>f_tile</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_tile</location>tile</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><location>../interface/ev_pixmap_short.xml</location>EV_PIXMAP</class>
			<comment>--</comment><comment> Pixmap that is used to instead of background_color.</comment>
			<comment>--</comment><comment> If set to Void, </comment><feature><location>../implementation_interface/ev_colorizable_i_short.xml#f_background_color</location>background_color</feature><comment> is used to fill.</comment>

	<anchor>f_dashed_line_style</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_dashed_line_style</location>dashed_line_style</feature><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<comment>--</comment><comment> Are lines drawn dashed?</comment>
	
<keyword>feature</keyword> <comment>--</comment><comment> Duplication</comment>

	<anchor>f_sub_pixmap</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_sub_pixmap</location>sub_pixmap</feature> <symbol>(</symbol><local>area</local><symbol>:</symbol> <class><location>../interface/ev_rectangle_short.xml</location>EV_RECTANGLE</class><symbol>)</symbol><symbol>:</symbol> <class><location>../interface/ev_pixmap_short.xml</location>EV_PIXMAP</class>
			<comment>--</comment><comment> Pixmap region of </comment><quoted>Current</quoted><comment> represented by rectangle </comment><quoted>area</quoted>
		<keyword>require</keyword>
			<tag>area_not_void</tag><symbol>:</symbol> <local>area</local> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>ensure</keyword>
			<tag>result_not_void</tag><symbol>:</symbol> <keyword>Result</keyword> <symbol>/=</symbol> <keyword>Void</keyword>
	
<keyword>feature</keyword> <comment>--</comment><comment> Element change</comment>

	<anchor>f_set_line_width</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_set_line_width</location>set_line_width</feature> <symbol>(</symbol><local>a_width</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Assign </comment><quoted>a_width</quoted><comment> to </comment><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_line_width</location>line_width</feature><comment>.</comment>
		<keyword>require</keyword>
			<tag>a_width_positive_or_zero</tag><symbol>:</symbol> <local>a_width</local> <symbol>&gt;=</symbol> <number>0</number>
		<keyword>ensure</keyword>
			<tag>line_width_assigned</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_any_i_short.xml#f_is_usable</location>is_usable</feature> <keyword>implies</keyword> <feature><location>../implementation_interface/ev_any_i_short.xml#f_attached_interface</location>attached_interface</feature><dot>.</dot><feature><location>../interface/ev_drawable_short.xml#f_line_width</location>line_width</feature> <symbol>=</symbol> <local>a_width</local>

	<anchor>f_set_drawing_mode</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_set_drawing_mode</location>set_drawing_mode</feature> <symbol>(</symbol><local>a_mode</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Set drawing mode to </comment><quoted>a_logical_mode</quoted><comment>.</comment>
		<keyword>require</keyword>
			<tag>a_mode_valid</tag><symbol>:</symbol> <feature><location>../interface/ev_drawable_constants_short.xml#f_valid_drawing_mode</location>valid_drawing_mode</feature><symbol> </symbol><symbol>(</symbol><local>a_mode</local><symbol>)</symbol>
		<keyword>ensure</keyword>
			<tag>drawing_mode_assigned</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_any_i_short.xml#f_is_usable</location>is_usable</feature> <keyword>implies</keyword> <feature><location>../implementation_interface/ev_any_i_short.xml#f_attached_interface</location>attached_interface</feature><dot>.</dot><feature><location>../interface/ev_drawable_short.xml#f_drawing_mode</location>drawing_mode</feature> <symbol>=</symbol> <local>a_mode</local>

	<anchor>f_set_clip_area</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_set_clip_area</location>set_clip_area</feature> <symbol>(</symbol><local>an_area</local><symbol>:</symbol> <class><location>../interface/ev_rectangle_short.xml</location>EV_RECTANGLE</class><symbol>)</symbol>
			<comment>--</comment><comment> Set area which will be refreshed.</comment>
		<keyword>require</keyword>
			<tag>an_area_not_void</tag><symbol>:</symbol> <local>an_area</local> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>ensure</keyword>
			<tag>clip_area_assigned</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_any_i_short.xml#f_is_usable</location>is_usable</feature> <keyword>implies</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_any_i_short.xml#f_attached_interface</location>attached_interface</feature><dot>.</dot><feature><location>../interface/ev_drawable_short.xml#f_clip_area</location>clip_area</feature> <keyword>as</keyword> l_clip_area <keyword>and then</keyword> <local>an_area</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><local>l_clip_area</local><symbol>)</symbol>

	<anchor>f_set_clip_region</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_set_clip_region</location>set_clip_region</feature> <symbol>(</symbol><local>a_region</local><symbol>:</symbol> <class><location>../interface/ev_region_short.xml</location>EV_REGION</class><symbol>)</symbol>
			<comment>--</comment><comment> Set region which will be refreshed.</comment>
		<keyword>require</keyword>
			<tag>a_region_not_void</tag><symbol>:</symbol> <local>a_region</local> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_remove_clipping</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_remove_clipping</location>remove_clipping</feature>
			<comment>--</comment><comment> Do not apply any clipping.</comment>
		<keyword>ensure</keyword>
			<tag>clip_area_void</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_any_i_short.xml#f_is_usable</location>is_usable</feature> <keyword>implies</keyword> <feature><location>../implementation_interface/ev_any_i_short.xml#f_attached_interface</location>attached_interface</feature><dot>.</dot><feature><location>../interface/ev_drawable_short.xml#f_clip_area</location>clip_area</feature> <symbol>=</symbol> <keyword>Void</keyword>

	<anchor>f_set_tile</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_set_tile</location>set_tile</feature> <symbol>(</symbol><local>a_pixmap</local><symbol>:</symbol> <class><location>../interface/ev_pixmap_short.xml</location>EV_PIXMAP</class><symbol>)</symbol>
			<comment>--</comment><comment> Set tile used to fill figures.</comment>
			<comment>--</comment><comment> Set to Void to use </comment><feature><location>../implementation_interface/ev_colorizable_i_short.xml#f_background_color</location>background_color</feature><comment> to fill.</comment>
		<keyword>require</keyword>
			<tag>a_pixmap_not_void</tag><symbol>:</symbol> <local>a_pixmap</local> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>ensure</keyword>
			<tag>tile_assigned</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_any_i_short.xml#f_is_usable</location>is_usable</feature> <keyword>implies</keyword> <feature><location>../implementation_interface/ev_any_i_short.xml#f_attached_interface</location>attached_interface</feature><dot>.</dot><feature><location>../interface/ev_drawable_short.xml#f_tile</location>tile</feature> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_remove_tile</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_remove_tile</location>remove_tile</feature>
			<comment>--</comment><comment> Do not apply a tile when filling.</comment>
		<keyword>ensure</keyword>
			<tag>tile_void</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_any_i_short.xml#f_is_usable</location>is_usable</feature> <keyword>implies</keyword> <feature><location>../implementation_interface/ev_any_i_short.xml#f_attached_interface</location>attached_interface</feature><dot>.</dot><feature><location>../interface/ev_drawable_short.xml#f_tile</location>tile</feature> <symbol>=</symbol> <keyword>Void</keyword>

	<anchor>f_enable_dashed_line_style</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_enable_dashed_line_style</location>enable_dashed_line_style</feature>
			<comment>--</comment><comment> Draw lines dashed.</comment>
		<keyword>ensure</keyword>
			<tag>dashed_line_style_enabled</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_any_i_short.xml#f_is_usable</location>is_usable</feature> <keyword>implies</keyword> <feature><location>../implementation_interface/ev_any_i_short.xml#f_attached_interface</location>attached_interface</feature><dot>.</dot><feature><location>../interface/ev_drawable_short.xml#f_dashed_line_style</location>dashed_line_style</feature>

	<anchor>f_disable_dashed_line_style</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_disable_dashed_line_style</location>disable_dashed_line_style</feature>
			<comment>--</comment><comment> Draw lines solid.</comment>
		<keyword>ensure</keyword>
			<tag>dashed_line_style_disabled</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_any_i_short.xml#f_is_usable</location>is_usable</feature> <keyword>implies</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_any_i_short.xml#f_attached_interface</location>attached_interface</feature><dot>.</dot><feature><location>../interface/ev_drawable_short.xml#f_dashed_line_style</location>dashed_line_style</feature>
	
<keyword>feature</keyword> <comment>--</comment><comment> Clearing and drawing operations</comment>

	<anchor>f_redraw</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_redraw</location>redraw</feature>
			<comment>--</comment><comment> Force </comment><quoted>Current</quoted><comment> to redraw itself.</comment>

	<anchor>f_clear</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_clear</location>clear</feature>
			<comment>--</comment><comment> Erase </comment><quoted>Current</quoted><comment> with </comment><feature><location>../implementation_interface/ev_colorizable_i_short.xml#f_background_color</location>background_color</feature><comment>.</comment>

	<anchor>f_clear_rectangle</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_clear_rectangle</location>clear_rectangle</feature> <symbol>(</symbol><local>x1</local><symbol>,</symbol> <local>y1</local><symbol>,</symbol> <local>a_width</local><symbol>,</symbol> <local>a_height</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw rectangle with upper-left corner on (</comment><quoted>x</quoted><comment>, </comment><quoted>y</quoted><comment>)</comment>
			<comment>--</comment><comment> with size </comment><quoted>a_width</quoted><comment> and </comment><quoted>a_height</quoted><comment> in </comment><feature><location>../implementation_interface/ev_colorizable_i_short.xml#f_background_color</location>background_color</feature><comment>.</comment>
	
<keyword>feature</keyword> <comment>--</comment><comment> Drawing operations</comment>

	<anchor>f_draw_point</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_point</location>draw_point</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw point at (</comment><quoted>x</quoted><comment>, 'y').</comment>

	<anchor>f_draw_text</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_text</location>draw_text</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_text</local><symbol>:</symbol> <class><include>False</include>READABLE_STRING_GENERAL</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw </comment><quoted>a_text</quoted><comment> with left of baseline at (</comment><quoted>x</quoted><comment>, </comment><quoted>y</quoted><comment>) using </comment><feature><location>../implementation_interface/ev_fontable_i_short.xml#f_font</location>font</feature><comment>.</comment>
		<keyword>require</keyword>
			<tag>a_text_not_void</tag><symbol>:</symbol> <local>a_text</local> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_draw_rotated_text</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_rotated_text</location>draw_rotated_text</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>angle</local><symbol>:</symbol> <class><include>False</include>REAL_32</class><symbol>;</symbol> <local>a_text</local><symbol>:</symbol> <class><include>False</include>READABLE_STRING_GENERAL</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw rotated text </comment><quoted>a_text</quoted><comment> with left of baseline at (</comment><quoted>x</quoted><comment>, </comment><quoted>y</quoted><comment>) using </comment><feature><location>../implementation_interface/ev_fontable_i_short.xml#f_font</location>font</feature><comment>.</comment>
			<comment>--</comment><comment> Rotation is number of radians counter-clockwise from horizontal plane.</comment>
		<keyword>require</keyword>
			<tag>a_text_not_void</tag><symbol>:</symbol> <local>a_text</local> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_draw_text_top_left</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_text_top_left</location>draw_text_top_left</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_text</local><symbol>:</symbol> <class><include>False</include>READABLE_STRING_GENERAL</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw </comment><quoted>a_text</quoted><comment> with top left corner at (</comment><quoted>x</quoted><comment>, </comment><quoted>y</quoted><comment>) using </comment><feature><location>../implementation_interface/ev_fontable_i_short.xml#f_font</location>font</feature><comment>.</comment>
		<keyword>require</keyword>
			<tag>a_text_not_void</tag><symbol>:</symbol> <local>a_text</local> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_draw_ellipsed_text</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_ellipsed_text</location>draw_ellipsed_text</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_text</local><symbol>:</symbol> <class><include>False</include>READABLE_STRING_GENERAL</class><symbol>;</symbol> <local>clipping_width</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw </comment><quoted>a_text</quoted><comment> with left of baseline at (</comment><quoted>x</quoted><comment>, </comment><quoted>y</quoted><comment>) using </comment><feature><location>../implementation_interface/ev_fontable_i_short.xml#f_font</location>font</feature><comment>.</comment>
			<comment>--</comment><comment> Text is clipped to </comment><quoted>clipping_width</quoted><comment> in pixels and ellipses are displayed</comment>
			<comment>--</comment><comment> to show truncated characters if any.</comment>
		<keyword>require</keyword>
			<tag>a_text_not_void</tag><symbol>:</symbol> <local>a_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>clipping_width_positive</tag><symbol>:</symbol> <local>clipping_width</local> <symbol>&gt;=</symbol> <number>0</number>

	<anchor>f_draw_ellipsed_text_top_left</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_ellipsed_text_top_left</location>draw_ellipsed_text_top_left</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_text</local><symbol>:</symbol> <class><include>False</include>READABLE_STRING_GENERAL</class><symbol>;</symbol> <local>clipping_width</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw </comment><quoted>a_text</quoted><comment> with top left corner at (</comment><quoted>x</quoted><comment>, </comment><quoted>y</quoted><comment>) using </comment><feature><location>../implementation_interface/ev_fontable_i_short.xml#f_font</location>font</feature><comment>.</comment>
			<comment>--</comment><comment> Text is clipped to </comment><quoted>clipping_width</quoted><comment> in pixels and ellipses are displayed</comment>
			<comment>--</comment><comment> to show truncated characters if any.</comment>
		<keyword>require</keyword>
			<tag>a_text_not_void</tag><symbol>:</symbol> <local>a_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>clipping_width_positive</tag><symbol>:</symbol> <local>clipping_width</local> <symbol>&gt;=</symbol> <number>0</number>

	<anchor>f_draw_segment</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_segment</location>draw_segment</feature> <symbol>(</symbol><local>x1</local><symbol>,</symbol> <local>y1</local><symbol>,</symbol> <local>x2</local><symbol>,</symbol> <local>y2</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw line segment from (</comment><quoted>x1</quoted><comment>, 'y1') to (</comment><quoted>x2</quoted><comment>, 'y2').</comment>

	<anchor>f_draw_straight_line</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_straight_line</location>draw_straight_line</feature> <symbol>(</symbol><local>x1</local><symbol>,</symbol> <local>y1</local><symbol>,</symbol> <local>x2</local><symbol>,</symbol> <local>y2</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw infinite straight line through (</comment><quoted>x1</quoted><comment>,'y1') and (</comment><quoted>x2</quoted><comment>,'y2').</comment>

	<anchor>f_draw_pixmap</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_pixmap</location>draw_pixmap</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_pixmap</local><symbol>:</symbol> <class><location>../interface/ev_pixmap_short.xml</location>EV_PIXMAP</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw </comment><quoted>a_pixmap</quoted><comment> with upper-left corner on (</comment><quoted>x</quoted><comment>, 'y').</comment>
		<keyword>require</keyword>
			<tag>a_pixmap_not_void</tag><symbol>:</symbol> <local>a_pixmap</local> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_draw_sub_pixmap</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_sub_pixmap</location>draw_sub_pixmap</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_pixmap</local><symbol>:</symbol> <class><location>../interface/ev_pixmap_short.xml</location>EV_PIXMAP</class><symbol>;</symbol> <local>area</local><symbol>:</symbol> <class><location>../interface/ev_rectangle_short.xml</location>EV_RECTANGLE</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw </comment><quoted>area</quoted><comment> of </comment><quoted>a_pixmap</quoted><comment> with upper-left corner on (</comment><quoted>x</quoted><comment>, </comment><quoted>y</quoted><comment>).</comment>
		<keyword>require</keyword>
			<tag>a_pixmap_not_void</tag><symbol>:</symbol> <local>a_pixmap</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>a_pixmap_not_destroyed</tag><symbol>:</symbol> <keyword>not</keyword> <local>a_pixmap</local><dot>.</dot><feature><location>../interface/ev_any_short.xml#f_is_destroyed</location>is_destroyed</feature>
			<tag>area_not_void</tag><symbol>:</symbol> <local>area</local> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_draw_sub_pixel_buffer</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_sub_pixel_buffer</location>draw_sub_pixel_buffer</feature> <symbol>(</symbol><local>a_x</local><symbol>,</symbol> <local>a_y</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_pixel_buffer</local><symbol>:</symbol> <class><location>../interface/ev_pixel_buffer_short.xml</location>EV_PIXEL_BUFFER</class><symbol>;</symbol> <local>area</local><symbol>:</symbol> <class><location>../interface/ev_rectangle_short.xml</location>EV_RECTANGLE</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw </comment><quoted>area</quoted><comment> of </comment><quoted>a_pixel_buffer</quoted><comment> with upper-left corner on (</comment><quoted>a_x</quoted><comment>, </comment><quoted>a_y</quoted><comment>).</comment>
		<keyword>require</keyword>
			<tag>a_pixel_buffer_not_void</tag><symbol>:</symbol> <local>a_pixel_buffer</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>a_pixel_buffer_not_destroyed</tag><symbol>:</symbol> <keyword>not</keyword> <local>a_pixel_buffer</local><dot>.</dot><feature><location>../interface/ev_any_short.xml#f_is_destroyed</location>is_destroyed</feature>
			<tag>area_not_void</tag><symbol>:</symbol> <local>area</local> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_draw_arc</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_arc</location>draw_arc</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>,</symbol> <local>a_bounding_width</local><symbol>,</symbol> <local>a_bounding_height</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_start_angle</local><symbol>,</symbol> <local>an_aperture</local><symbol>:</symbol> <class><include>False</include>REAL_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw a part of an ellipse defined by a rectangular area with an</comment>
			<comment>--</comment><comment> upper left corner at </comment><quoted>x</quoted><comment>,</comment><quoted>y</quoted><comment>, width </comment><quoted>a_bounding_width</quoted><comment> and height</comment>
			<comment>--</comment><comment> </comment><quoted>a_bounding_height</quoted><comment>.</comment>
			<comment>--</comment><comment> Start at </comment><quoted>a_start_angle</quoted><comment> and stop at </comment><quoted>a_start_angle</quoted><comment> + </comment><quoted>an_aperture</quoted><comment>.</comment>
			<comment>--</comment><comment> Angles are measured in radians.</comment>
		<keyword>require</keyword>
			<tag>a_bounding_width_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_width</local> <symbol>&gt;=</symbol> <number>0</number>
			<tag>a_bounding_width_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_height</local> <symbol>&gt;=</symbol> <number>0</number>

	<anchor>f_draw_rectangle</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_rectangle</location>draw_rectangle</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>,</symbol> <local>a_width</local><symbol>,</symbol> <local>a_height</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw rectangle with upper-left corner on (</comment><quoted>x</quoted><comment>, 'y')</comment>
			<comment>--</comment><comment> with size </comment><quoted>a_width</quoted><comment> and </comment><quoted>a_height</quoted><comment>.</comment>
		<keyword>require</keyword>
			<tag>a_width_positive_or_zero</tag><symbol>:</symbol> <local>a_width</local> <symbol>&gt;=</symbol> <number>0</number>
			<tag>a_height_positive_or_zero</tag><symbol>:</symbol> <local>a_height</local> <symbol>&gt;=</symbol> <number>0</number>

	<anchor>f_draw_ellipse</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_ellipse</location>draw_ellipse</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>,</symbol> <local>a_bounding_width</local><symbol>,</symbol> <local>a_bounding_height</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw an ellipse defined by a rectangular area with an</comment>
			<comment>--</comment><comment> upper left corner at </comment><quoted>x</quoted><comment>,</comment><quoted>y</quoted><comment>, width </comment><quoted>a_bounding_width</quoted><comment> and height</comment>
			<comment>--</comment><comment> </comment><quoted>a_bounding_height</quoted><comment>.</comment>
		<keyword>require</keyword>
			<tag>a_bounding_width_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_width</local> <symbol>&gt;=</symbol> <number>0</number>
			<tag>a_bounding_height_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_height</local> <symbol>&gt;=</symbol> <number>0</number>

	<anchor>f_draw_polyline</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_polyline</location>draw_polyline</feature> <symbol>(</symbol><local>points</local><symbol>:</symbol> <class><include>False</include>ARRAY</class> <symbol>[</symbol><class><location>../interface/ev_coordinate_short.xml</location>EV_COORDINATE</class><symbol>]</symbol><symbol>;</symbol> <local>is_closed</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw line segments between subsequent points in</comment>
			<comment>--</comment><comment> </comment><quoted>points</quoted><comment>. If </comment><quoted>is_closed</quoted><comment> draw line segment between first</comment>
			<comment>--</comment><comment> and last point in </comment><quoted>points</quoted><comment>.</comment>
		<keyword>require</keyword>
			<tag>points_not_void</tag><symbol>:</symbol> <local>points</local> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_draw_pie_slice</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_draw_pie_slice</location>draw_pie_slice</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>,</symbol> <local>a_bounding_width</local><symbol>,</symbol> <local>a_bounding_height</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_start_angle</local><symbol>,</symbol> <local>an_aperture</local><symbol>:</symbol> <class><include>False</include>REAL_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw part of an ellipse defined by a rectangular area with an</comment>
			<comment>--</comment><comment> upper left corner at </comment><quoted>x</quoted><comment>,</comment><quoted>y</quoted><comment>, width </comment><quoted>a_bounding_width</quoted><comment> and height</comment>
			<comment>--</comment><comment> </comment><quoted>a_bounding_height</quoted><comment>.</comment>
			<comment>--</comment><comment> Start at </comment><quoted>a_start_angle</quoted><comment> and stop at </comment><quoted>a_start_angle</quoted><comment> + </comment><quoted>an_aperture</quoted><comment>.</comment>
			<comment>--</comment><comment> The arc is then closed by two segments through (</comment><quoted>x</quoted><comment>, 'y').</comment>
			<comment>--</comment><comment> Angles are measured in radians.</comment>
		<keyword>require</keyword>
			<tag>a_bounding_width_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_width</local> <symbol>&gt;=</symbol> <number>0</number>
			<tag>a_bounding_height_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_height</local> <symbol>&gt;=</symbol> <number>0</number>
	
<keyword>feature</keyword> <comment>--</comment><comment> Drawing operations (filled)</comment>

	<anchor>f_fill_rectangle</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_fill_rectangle</location>fill_rectangle</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>,</symbol> <local>a_width</local><symbol>,</symbol> <local>a_height</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Draw rectangle with upper-left corner on (</comment><quoted>x</quoted><comment>, 'y')</comment>
			<comment>--</comment><comment> with size </comment><quoted>a_width</quoted><comment> and </comment><quoted>a_height</quoted><comment>. Fill with </comment><feature><location>../implementation_interface/ev_colorizable_i_short.xml#f_background_color</location>background_color</feature><comment>.</comment>
		<keyword>require</keyword>
			<tag>a_width_positive_or_zero</tag><symbol>:</symbol> <local>a_width</local> <symbol>&gt;=</symbol> <number>0</number>
			<tag>a_height_positive_or_zero</tag><symbol>:</symbol> <local>a_height</local> <symbol>&gt;=</symbol> <number>0</number>

	<anchor>f_fill_ellipse</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_fill_ellipse</location>fill_ellipse</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>,</symbol> <local>a_bounding_width</local><symbol>,</symbol> <local>a_bounding_height</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Fill an ellipse defined by a rectangular area with an</comment>
			<comment>--</comment><comment> upper left corner at </comment><quoted>x</quoted><comment>,</comment><quoted>y</quoted><comment>, width </comment><quoted>a_bounding_width</quoted><comment> and height</comment>
			<comment>--</comment><comment> </comment><quoted>a_bounding_height</quoted><comment>.</comment>
		<keyword>require</keyword>
			<tag>a_bounding_width_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_width</local> <symbol>&gt;=</symbol> <number>0</number>
			<tag>a_bounding_height_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_height</local> <symbol>&gt;=</symbol> <number>0</number>

	<anchor>f_fill_polygon</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_fill_polygon</location>fill_polygon</feature> <symbol>(</symbol><local>points</local><symbol>:</symbol> <class><include>False</include>ARRAY</class> <symbol>[</symbol><class><location>../interface/ev_coordinate_short.xml</location>EV_COORDINATE</class><symbol>]</symbol><symbol>)</symbol>
			<comment>--</comment><comment> Draw line segments between subsequent points in </comment><quoted>points</quoted><comment>.</comment>
			<comment>--</comment><comment> Fill with </comment><feature><location>../implementation_interface/ev_colorizable_i_short.xml#f_background_color</location>background_color</feature><comment>.</comment>
		<keyword>require</keyword>
			<tag>points_not_void</tag><symbol>:</symbol> <local>points</local> <symbol>/=</symbol> <keyword>Void</keyword>

	<anchor>f_fill_pie_slice</anchor><feature><location>../implementation_interface/ev_drawable_i_short.xml#f_fill_pie_slice</location>fill_pie_slice</feature> <symbol>(</symbol><local>x</local><symbol>,</symbol> <local>y</local><symbol>,</symbol> <local>a_bounding_width</local><symbol>,</symbol> <local>a_bounding_height</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>;</symbol> <local>a_start_angle</local><symbol>,</symbol> <local>an_aperture</local><symbol>:</symbol> <class><include>False</include>REAL_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Fill part of an ellipse defined by a rectangular area with an</comment>
			<comment>--</comment><comment> upper left corner at </comment><quoted>x</quoted><comment>,</comment><quoted>y</quoted><comment>, width </comment><quoted>a_bounding_width</quoted><comment> and height</comment>
			<comment>--</comment><comment> </comment><quoted>a_bounding_height</quoted><comment>.</comment>
			<comment>--</comment><comment> Start at </comment><quoted>a_start_angle</quoted><comment> and stop at </comment><quoted>a_start_angle</quoted><comment> + </comment><quoted>an_aperture</quoted><comment>.</comment>
			<comment>--</comment><comment> The arc is then closed by two segments through (</comment><quoted>x</quoted><comment>, 'y').</comment>
			<comment>--</comment><comment> Angles are measured in radians.</comment>
		<keyword>require</keyword>
			<tag>a_bounding_width_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_width</local> <symbol>&gt;=</symbol> <number>0</number>
			<tag>a_bounding_height_positive_or_zero</tag><symbol>:</symbol> <local>a_bounding_height</local> <symbol>&gt;=</symbol> <number>0</number>
	
<keyword>note</keyword>
	<indexing_tag>copyright</indexing_tag><symbol>:</symbol> <string>&quot;Copyright (c) 1984-2006, Eiffel Software and others&quot;</string>
	<indexing_tag>license</indexing_tag><symbol>:</symbol> <string>&quot;Eiffel Forum License v2 (see </string><string><location>http://www.eiffel.com/licensing/forum.txt</location>http://www.eiffel.com/licensing/forum.txt</string><string>)&quot;</string>
	<indexing_tag>source</indexing_tag><symbol>:</symbol> <string>&quot;</string><string>[</string>
		<string>Eiffel Software</string>
		<string>356 Storke Road, Goleta, CA 93117 USA</string>
		<string>Telephone 805-685-1006, Fax 805-685-6869</string>
		<string>Website </string><string><location>http://www.eiffel.com</location>http://www.eiffel.com</string>
		<string>Customer support </string><string><location>http://support.eiffel.com</location>http://support.eiffel.com</string>
	<string>]</string><string>&quot;</string>

<keyword>end</keyword> <comment>--</comment> <comment>class </comment><class><location>../implementation_interface/ev_drawable_i_short.xml</location>EV_DRAWABLE_I</class></system>

