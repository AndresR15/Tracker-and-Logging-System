<system>
<keyword>note</keyword>
	<indexing_tag>description</indexing_tag><symbol>:</symbol> <string>&quot;</string><string>[</string>
		<string>Objects that contain all structures required for buffering RTF for saving/loading/implementation.</string>
	<string>]</string><string>&quot;</string>
	<indexing_tag>legal</indexing_tag><symbol>:</symbol> <string>&quot;See notice at end of class.&quot;</string>
	<indexing_tag>status</indexing_tag><symbol>:</symbol> <string>&quot;See notice at end of class.&quot;</string>
	<indexing_tag>date</indexing_tag><symbol>:</symbol> <string>&quot;$Date: 2013-08-07 11:55:28 -0700 (Wed, 07 Aug 2013) $&quot;</string>
	<indexing_tag>revision</indexing_tag><symbol>:</symbol> <string>&quot;$Revision: 92864 $&quot;</string>

<keyword>class</keyword> 
	<class><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml</location>EV_RICH_TEXT_BUFFERING_STRUCTURES_I</class>

<keyword>inherit</keyword>
	<class><include>False</include>ANY</class>

	<class><location>../implementation_interface/ev_rich_text_constants_i.xml</location>EV_RICH_TEXT_CONSTANTS_I</class>
		<keyword>export</keyword>
			<symbol>{</symbol>NONE<symbol>}</symbol> <keyword>all</keyword>
		<keyword>end</keyword>

	<class><location>../interface/ev_font_constants.xml</location>EV_FONT_CONSTANTS</class>
		<keyword>export</keyword>
			<symbol>{</symbol>NONE<symbol>}</symbol> <keyword>all</keyword>
		<keyword>end</keyword>

<keyword>create</keyword> 
	<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_set_rich_text</location>set_rich_text</feature>

<keyword>feature</keyword> <comment>--</comment><comment> Status Setting</comment>

	<anchor>f_set_rich_text</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_set_rich_text</location>set_rich_text</feature> <symbol>(</symbol><local>a_rich_text</local><symbol>:</symbol> <class><location>../implementation_interface/ev_rich_text_i.xml</location>EV_RICH_TEXT_I</class><symbol>)</symbol>
			<comment>--</comment><comment> Assign </comment><quoted>a_rich_text</quoted><comment> to </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature><comment> and initialize buffering structures.</comment>
		<keyword>require</keyword>
			<tag>a_rich_text_not_void</tag><symbol>:</symbol> <local>a_rich_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>do</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_clear_structures</location>clear_structures</feature>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature> <symbol>:=</symbol> <local>a_rich_text</local>
		<keyword>end</keyword>

	<anchor>f_clear_structures</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_clear_structures</location>clear_structures</feature>
			<comment>--</comment><comment> Clear all structures used for buffering into RTF format.</comment>
		<keyword>do</keyword>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_start_formats</location>start_formats</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_end_formats</location>end_formats</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_formats</location>formats</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_formats_index</location>formats_index</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_heights</location>heights</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_formats</location>hashed_formats</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_offsets</location>format_offsets</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_offset</location>color_offset</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_back_color_offset</location>back_color_offset</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_fonts</location>hashed_fonts</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_offset</location>font_offset</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_underlined</location>is_current_format_underlined</feature> <symbol>:=</symbol> <keyword>False</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_striked_through</location>is_current_format_striked_through</feature> <symbol>:=</symbol> <keyword>False</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_bold</location>is_current_format_bold</feature> <symbol>:=</symbol> <keyword>False</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_italic</location>is_current_format_italic</feature> <symbol>:=</symbol> <keyword>False</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_vertical_offset</location>current_vertical_offset</feature> <symbol>:=</symbol> <number>0</number>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_text</location>color_text</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_color_table_start</location>Color_table_start</feature><dot>.</dot><feature><include>False</include>twin</feature>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_font_table_start</location>Font_table_start</feature><dot>.</dot><feature><include>False</include>twin</feature>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_count</location>font_count</feature> <symbol>:=</symbol> <number>0</number>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_count</location>color_count</feature> <symbol>:=</symbol> <number>0</number>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_buffered_text</location>buffered_text</feature><dot>.</dot><feature><include>False</include>make_empty</feature>
		<keyword>end</keyword>

	<anchor>f_initialize_for_saving</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_initialize_for_saving</location>initialize_for_saving</feature>
			<comment>--</comment><comment> Initialize </comment><quoted>Current</quoted><comment> for saving'.</comment>
		<keyword>do</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_clear_structures</location>clear_structures</feature>
		<keyword>end</keyword>

	<anchor>f_append_text_for_rtf</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_append_text_for_rtf</location>append_text_for_rtf</feature> <symbol>(</symbol><local>a_text</local><symbol>:</symbol> <class><include>False</include>READABLE_STRING_GENERAL</class><symbol>;</symbol> <local>a_format</local><symbol>:</symbol> <class><location>../implementation_interface/ev_character_format_i.xml</location>EV_CHARACTER_FORMAT_I</class><symbol>)</symbol>
			<comment>--</comment><comment> Append RTF representation of </comment><quoted>a_text</quoted><comment> with format </comment><quoted>a_format</quoted><comment> to </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature>
			<comment>--</comment><comment> and store information required from </comment><quoted>a_format</quoted><comment> ready for completion of buffering.</comment>
		<keyword>local</keyword>
			<local>hashed_character_format</local><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>STRING_8</class>
			<local>temp_string</local><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<local>format_index</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>vertical_offset</local><symbol>,</symbol> <local>counter</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>character_code</local><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
			<local>format_underlined</local><symbol>,</symbol> <local>format_striked</local><symbol>,</symbol> <local>format_bold</local><symbol>,</symbol> <local>format_italic</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<local>height_in_half_points</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
		<keyword>do</keyword>
			<local>hashed_character_format</local> <symbol>:=</symbol> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_any_i.xml#f_attached_interface</location>attached_interface</feature><dot>.</dot><feature><location>../interface/ev_character_format.xml#f_hash_value</location>hash_value</feature>
			<keyword>check</keyword>
					<local>hashed_character_format</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<keyword>then</keyword>
			<keyword>end</keyword>
			<keyword>if</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_formats</location>hashed_formats</feature><dot>.</dot><feature><include>False</include>has</feature><symbol> </symbol><symbol>(</symbol><local>hashed_character_format</local><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_formats</location>hashed_formats</feature><dot>.</dot><feature><include>False</include>put</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_any_i.xml#f_attached_interface</location>attached_interface</feature><symbol>,</symbol> <local>hashed_character_format</local><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_formats</location>formats</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_any_i.xml#f_attached_interface</location>attached_interface</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_heights</location>heights</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_height_in_points</location>height_in_points</feature> <symbol>*</symbol> <number>2</number><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_offsets</location>format_offsets</feature><dot>.</dot><feature><include>False</include>put</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_formats</location>hashed_formats</feature><dot>.</dot><feature><include>False</include>count</feature><symbol>,</symbol> <local>hashed_character_format</local><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_build_color_from_format</location>build_color_from_format</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_build_font_from_format</location>build_font_from_format</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><symbol>)</symbol>
			<keyword>end</keyword>
			<local>format_index</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_offsets</location>format_offsets</feature><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>hashed_character_format</local><symbol>)</symbol>
			<keyword>create</keyword> <local>temp_string</local><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>128</number><symbol>)</symbol>
			<keyword>if</keyword> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_bcolor_set</location>bcolor_set</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_highlight_string</location>Rtf_highlight_string</feature><symbol>)</symbol>
				<local>temp_string</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_back_color_offset</location>back_color_offset</feature><dot>.</dot><feature><include>False</include>i_th</feature><symbol> </symbol><symbol>(</symbol><local>format_index</local><symbol>)</symbol><symbol>)</symbol>
			<keyword>end</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_color_string</location>Rtf_color_string</feature><symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_offset</location>color_offset</feature><dot>.</dot><feature><include>False</include>i_th</feature><symbol> </symbol><symbol>(</symbol><local>format_index</local><symbol>)</symbol><symbol>)</symbol>
			<local>format_underlined</local> <symbol>:=</symbol> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_is_underlined</location>is_underlined</feature>
			<keyword>if</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_underlined</location>is_current_format_underlined</feature> <keyword>and</keyword> <local>format_underlined</local> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_underline_string</location>Rtf_underline_string</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_underlined</location>is_current_format_underlined</feature> <symbol>:=</symbol> <keyword>True</keyword>
			<keyword>elseif</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_underlined</location>is_current_format_underlined</feature> <keyword>and</keyword> <keyword>not</keyword> <local>format_underlined</local> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_underline_string</location>Rtf_underline_string</feature> <symbol>+</symbol> &quot;0&quot;<symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_underlined</location>is_current_format_underlined</feature> <symbol>:=</symbol> <keyword>False</keyword>
			<keyword>end</keyword>
			<local>format_striked</local> <symbol>:=</symbol> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_is_striked_out</location>is_striked_out</feature>
			<keyword>if</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_striked_through</location>is_current_format_striked_through</feature> <keyword>and</keyword> <local>format_striked</local> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_strikeout_string</location>Rtf_strikeout_string</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_striked_through</location>is_current_format_striked_through</feature> <symbol>:=</symbol> <keyword>True</keyword>
			<keyword>elseif</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_striked_through</location>is_current_format_striked_through</feature> <keyword>and</keyword> <keyword>not</keyword> <local>format_striked</local> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_strikeout_string</location>Rtf_strikeout_string</feature> <symbol>+</symbol> &quot;0&quot;<symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_striked_through</location>is_current_format_striked_through</feature> <symbol>:=</symbol> <keyword>False</keyword>
			<keyword>end</keyword>
			<local>format_bold</local> <symbol>:=</symbol> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_is_bold</location>is_bold</feature>
			<keyword>if</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_bold</location>is_current_format_bold</feature> <keyword>and</keyword> <local>format_bold</local> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_bold_string</location>Rtf_bold_string</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_bold</location>is_current_format_bold</feature> <symbol>:=</symbol> <keyword>True</keyword>
			<keyword>elseif</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_bold</location>is_current_format_bold</feature> <keyword>and</keyword> <keyword>not</keyword> <local>format_bold</local> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_bold_string</location>Rtf_bold_string</feature> <symbol>+</symbol> &quot;0&quot;<symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_bold</location>is_current_format_bold</feature> <symbol>:=</symbol> <keyword>False</keyword>
			<keyword>end</keyword>
			<local>format_italic</local> <symbol>:=</symbol> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_shape</location>shape</feature> <symbol>=</symbol> <feature><location>../interface/ev_font_constants.xml#f_shape_italic</location>Shape_italic</feature>
			<keyword>if</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_italic</location>is_current_format_italic</feature> <keyword>and</keyword> <local>format_italic</local> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_italic_string</location>Rtf_italic_string</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_italic</location>is_current_format_italic</feature> <symbol>:=</symbol> <keyword>True</keyword>
			<keyword>elseif</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_italic</location>is_current_format_italic</feature> <keyword>and</keyword> <keyword>not</keyword> <local>format_italic</local> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_italic_string</location>Rtf_italic_string</feature> <symbol>+</symbol> &quot;0&quot;<symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_italic</location>is_current_format_italic</feature> <symbol>:=</symbol> <keyword>False</keyword>
			<keyword>end</keyword>
			<local>vertical_offset</local> <symbol>:=</symbol> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_vertical_offset</location>vertical_offset</feature>
			<keyword>if</keyword> <local>vertical_offset</local> <symbol>/=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_vertical_offset</location>current_vertical_offset</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_vertical_offset</location>Rtf_vertical_offset</feature><symbol>)</symbol>
				<local>height_in_half_points</local> <symbol>:=</symbol> <symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_pixels_to_half_points</location>pixels_to_half_points</feature><symbol> </symbol><symbol>(</symbol><local>vertical_offset</local><symbol>)</symbol><symbol>)</symbol>
				<local>temp_string</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><local>height_in_half_points</local><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_vertical_offset</location>current_vertical_offset</feature> <symbol>:=</symbol> <local>vertical_offset</local>
			<keyword>end</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_font_string</location>Rtf_font_string</feature><symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_offset</location>font_offset</feature><dot>.</dot><feature><include>False</include>i_th</feature><symbol> </symbol><symbol>(</symbol><local>format_index</local><symbol>)</symbol><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_font_size_string</location>Rtf_font_size_string</feature><symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_heights</location>heights</feature><dot>.</dot><feature><include>False</include>i_th</feature><symbol> </symbol><symbol>(</symbol><local>format_index</local><symbol>)</symbol><symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_space_string</location>Space_string</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>)</symbol>
			<keyword>from</keyword>
				<local>counter</local> <symbol>:=</symbol> <number>1</number>
			<keyword>until</keyword>
				<local>counter</local> <symbol>&gt;</symbol> <local>a_text</local><dot>.</dot><feature><include>False</include>count</feature>
			<keyword>loop</keyword>
				<local>character_code</local> <symbol>:=</symbol> <local>a_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>counter</local><symbol>)</symbol>
				<keyword>if</keyword> <local>character_code</local> <symbol>=</symbol> <char>'%N'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_newline</location>Rtf_newline</feature> <symbol>+</symbol> &quot;%N&quot;<symbol>)</symbol>
				<keyword>elseif</keyword> <local>character_code</local> <symbol>=</symbol> <char>'\'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_backslash</location>Rtf_backslash</feature><symbol>)</symbol>
				<keyword>elseif</keyword> <local>character_code</local> <symbol>=</symbol> <char>'{'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_open_brace</location>Rtf_open_brace</feature><symbol>)</symbol>
				<keyword>elseif</keyword> <local>character_code</local> <symbol>=</symbol> <char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_close_brace</location>Rtf_close_brace</feature><symbol>)</symbol>
				<keyword>elseif</keyword> <local>character_code</local><dot>.</dot><feature><include>False</include>natural_32_code</feature> <symbol>&lt;=</symbol> <symbol>{</symbol><class><include>False</include>CHARACTER_8</class><symbol>}</symbol><dot>.</dot><feature><include>False</include>max_value</feature><dot>.</dot><feature><include>False</include>to_natural_32</feature> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><local>character_code</local><symbol>)</symbol>
				<keyword>else</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_unicode_character</location>Rtf_unicode_character</feature><symbol>)</symbol>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append_natural_32</feature><symbol> </symbol><symbol>(</symbol><local>character_code</local><dot>.</dot><feature><include>False</include>natural_32_code</feature><symbol>)</symbol>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><char>'?'</char><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
				<keyword>end</keyword>
				<local>counter</local> <symbol>:=</symbol> <local>counter</local> <symbol>+</symbol> <number>1</number>
			<keyword>end</keyword>
		<keyword>end</keyword>

	<anchor>f_rich_text</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><location>../implementation_interface/ev_rich_text_i.xml</location>EV_RICH_TEXT_I</class>
			<comment>--</comment><comment> Rich text associated with </comment><quoted>Current</quoted><comment>.</comment>

	<anchor>f_internal_text</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<comment>--</comment><comment> Text used for building RTF strings internally before buffering or saving.</comment>
	
<keyword>feature</keyword> <symbol>{</symbol><class><location>../implementation_interface/ev_any_i.xml</location>EV_ANY_I</class><symbol>}</symbol> <comment>--</comment><comment> Status Setting</comment>

	<anchor>f_generate_paragraph_information</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_generate_paragraph_information</location>generate_paragraph_information</feature> <symbol>(</symbol><local>a_text</local><symbol>:</symbol> <class><include>False</include>READABLE_STRING_GENERAL</class><symbol>)</symbol>
			<comment>--</comment><comment> </comment><quoted>Result</quoted><comment> is index of first character of every line in </comment><quoted>a_text</quoted><comment> upon</comment>
			<comment>--</comment><comment> which the paragraph formatting changes, as determined by '%N'.</comment>
		<keyword>require</keyword>
			<tag>text_not_void</tag><symbol>:</symbol> <local>a_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>local</keyword>
			<local>counter</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>l_rich_text</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature>
		<keyword>do</keyword>
			<local>l_rich_text</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature>
			<keyword>check</keyword>
					<local>l_rich_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<keyword>then</keyword>
			<keyword>end</keyword>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_start_indexes</location>paragraph_start_indexes</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_start_indexes</location>paragraph_start_indexes</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_build_paragraph_from_format</location>build_paragraph_from_format</feature><symbol> </symbol><symbol>(</symbol><local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_i.xml#f_internal_paragraph_format</location>internal_paragraph_format</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol><symbol>)</symbol>
			<keyword>from</keyword>
				<local>counter</local> <symbol>:=</symbol> <number>1</number>
			<keyword>until</keyword>
				<local>counter</local> <symbol>&gt;</symbol> <local>a_text</local><dot>.</dot><feature><include>False</include>count</feature>
			<keyword>loop</keyword>
				<keyword>if</keyword> <local>counter</local> <symbol>&lt;</symbol> <local>a_text</local><dot>.</dot><feature><include>False</include>count</feature> <symbol>-</symbol> <number>1</number> <keyword>and then</keyword> <local>a_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>counter</local><symbol>)</symbol> <symbol>=</symbol> <char>'%N'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<keyword>if</keyword> <keyword>not</keyword> <local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_i.xml#f_internal_paragraph_format_contiguous</location>internal_paragraph_format_contiguous</feature><symbol> </symbol><symbol>(</symbol><local>counter</local><symbol>,</symbol> <local>counter</local> <symbol>+</symbol> <number>2</number><symbol>)</symbol> <keyword>then</keyword>
						<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_start_indexes</location>paragraph_start_indexes</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><local>counter</local> <symbol>+</symbol> <number>1</number><symbol>)</symbol>
						<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_build_paragraph_from_format</location>build_paragraph_from_format</feature><symbol> </symbol><symbol>(</symbol><local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_i.xml#f_internal_paragraph_format</location>internal_paragraph_format</feature><symbol> </symbol><symbol>(</symbol><local>counter</local> <symbol>+</symbol> <number>1</number><symbol>)</symbol><symbol>)</symbol>
					<keyword>end</keyword>
				<keyword>end</keyword>
				<local>counter</local> <symbol>:=</symbol> <local>counter</local> <symbol>+</symbol> <number>1</number>
			<keyword>end</keyword>
		<keyword>ensure</keyword>
			<tag>start_indexes_not_void</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_start_indexes</location>paragraph_start_indexes</feature> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>formats_not_void</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>count_greater_or_equal_to_one</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_start_indexes</location>paragraph_start_indexes</feature><dot>.</dot><feature><include>False</include>count</feature> <symbol>&gt;=</symbol> <number>1</number>
			<tag>counts_equal</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_start_indexes</location>paragraph_start_indexes</feature><dot>.</dot><feature><include>False</include>count</feature> <symbol>=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature><dot>.</dot><feature><include>False</include>count</feature>
		<keyword>end</keyword>

	<anchor>f_set_with_rtf</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_set_with_rtf</location>set_with_rtf</feature> <symbol>(</symbol><local>rtf_text</local><symbol>:</symbol> <class><include>False</include>STRING_8</class><symbol>)</symbol>
			<comment>--</comment><comment> Set </comment><quoted>text</quoted><comment> and formatting of </comment><quoted>Current</quoted><comment> from </comment><quoted>rtf_text</quoted><comment> in RTF format.</comment>
		<keyword>require</keyword>
			<tag>rtf_text_not_void</tag><symbol>:</symbol> <local>rtf_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>rtf_text_not_empty</tag><symbol>:</symbol> <keyword>not</keyword> <local>rtf_text</local><dot>.</dot><feature><include>False</include>is_empty</feature>
		<keyword>local</keyword>
			<local>current_character</local><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
			<local>found_opening_brace</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<local>paragraph_format</local><symbol>:</symbol> <keyword>detachable</keyword> <class><location>../interface/ev_paragraph_format.xml</location>EV_PARAGRAPH_FORMAT</class>
			<local>last_load_value</local><symbol>,</symbol> <local>current_load_value</local><symbol>,</symbol> <local>key_index</local><symbol>,</symbol> <local>keys_count</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>l_rich_text</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature>
			<local>l_current_format</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_format</location>current_format</feature>
		<keyword>do</keyword>
			<local>l_rich_text</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature>
			<keyword>check</keyword>
					<local>l_rich_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<keyword>then</keyword>
			<keyword>end</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_load_successful</location>last_load_successful</feature> <symbol>:=</symbol> <keyword>True</keyword>
			<keyword>if</keyword> <local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol> <symbol>=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_open_brace_character</location>Rtf_open_brace_character</feature> <keyword>then</keyword>
				<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_stack</location>format_stack</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>8</number><symbol>)</symbol>
				<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_fonts</location>all_fonts</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
				<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_colors</location>all_colors</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_colors</location>all_colors</feature><dot>.</dot><feature><include>False</include>force</feature><symbol> </symbol><symbol>(</symbol><local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_colorizable_i.xml#f_foreground_color</location>foreground_color</feature><symbol>,</symbol> <number>0</number><symbol>)</symbol>
				<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_formats</location>all_formats</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
				<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_formats</location>all_paragraph_formats</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
				<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_indexes</location>all_paragraph_indexes</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
				<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_highest_read_char</location>highest_read_char</feature> <symbol>:=</symbol> <number>0</number>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_number_of_characters_opened</location>number_of_characters_opened</feature> <symbol>:=</symbol> <number>0</number>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_depth</location>current_depth</feature> <symbol>:=</symbol> <number>0</number>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_first_color_is_auto</location>first_color_is_auto</feature> <symbol>:=</symbol> <keyword>False</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorred</location>last_colorred</feature> <symbol>:=</symbol> <number>-1</number>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorgreen</location>last_colorgreen</feature> <symbol>:=</symbol> <number>-1</number>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorblue</location>last_colorblue</feature> <symbol>:=</symbol> <number>-1</number>
				<keyword>create</keyword> <local>l_current_format</local>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_format</location>current_format</feature> <symbol>:=</symbol> <local>l_current_format</local>
				<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_plain_text</location>plain_text</feature><dot>.</dot><feature><include>False</include>make_empty</feature>
				<keyword>from</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>:=</symbol> <number>1</number>
				<keyword>until</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>&gt;</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>count</feature> <keyword>or</keyword> <symbol>(</symbol><local>found_opening_brace</local> <keyword>and</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_depth</location>current_depth</feature> <symbol>=</symbol> <number>0</number><symbol>)</symbol>
				<keyword>loop</keyword>
					<local>current_character</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_get_character</location>get_character</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>)</symbol>
					<keyword>if</keyword> <local>found_opening_brace</local> <keyword>then</keyword>
						<keyword>if</keyword> <local>current_character</local> <symbol>=</symbol> <char>'{'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
							<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_stack</location>format_stack</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><include>False</include>twin</feature><symbol>)</symbol>
						<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
							<local>l_current_format</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_stack</location>format_stack</feature><dot>.</dot><feature><include>False</include>item</feature>
							<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_format</location>current_format</feature> <symbol>:=</symbol> <local>l_current_format</local>
							<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_stack</location>format_stack</feature><dot>.</dot><feature><include>False</include>remove</feature>
						<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>'\'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
							<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_keyword</location>process_keyword</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>)</symbol>
						<keyword>elseif</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>&gt;=</symbol> <number>2</number> <keyword>and then</keyword> <local>current_character</local> <symbol>/=</symbol> <char>'%R'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>and</keyword> <symbol>(</symbol><local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>-</symbol> <number>1</number><symbol>)</symbol> <symbol>=</symbol> <char>'%N'</char> <keyword>or</keyword> <local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>-</symbol> <number>1</number><symbol>)</symbol> <symbol>=</symbol> <char>'}'</char> <keyword>or</keyword> <local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>-</symbol> <number>1</number><symbol>)</symbol> <symbol>=</symbol> <char>'{'</char><symbol>)</symbol> <keyword>then</keyword>
							<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_text</location>process_text</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>-</symbol> <number>1</number><symbol>)</symbol>
						<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>' '</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
							<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_text</location>process_text</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>)</symbol>
						<keyword>end</keyword>
					<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>'{'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
						<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_stack</location>format_stack</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><include>False</include>twin</feature><symbol>)</symbol>
						<local>found_opening_brace</local> <symbol>:=</symbol> <keyword>True</keyword>
					<keyword>end</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_update_main_iterator</location>update_main_iterator</feature>
					<keyword>if</keyword> <local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_action_sequences_i.xml#f_file_access_actions_internal</location>file_access_actions_internal</feature> <symbol>/=</symbol> <keyword>Void</keyword> <keyword>then</keyword>
						<local>current_load_value</local> <symbol>:=</symbol> <symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>*</symbol> <number>90</number><symbol>)</symbol> <symbol>//</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>count</feature>
						<keyword>if</keyword> <local>current_load_value</local> <symbol>/=</symbol> <local>last_load_value</local> <keyword>then</keyword>
							<local>last_load_value</local> <symbol>:=</symbol> <local>current_load_value</local>
							<local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_action_sequences_i.xml#f_file_access_actions</location>file_access_actions</feature><dot>.</dot><feature><location>../interface/ev_lite_action_sequence.xml#f_call</location>call</feature><symbol> </symbol><symbol>(</symbol><symbol>[</symbol><local>current_load_value</local><symbol>]</symbol><symbol>)</symbol>
						<keyword>end</keyword>
					<keyword>end</keyword>
				<keyword>end</keyword>
				<keyword>check</keyword>
					<tag>no_carriage_returns</tag><symbol>:</symbol> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_plain_text</location>plain_text</feature><dot>.</dot><feature><include>False</include>has</feature><symbol> </symbol><symbol>(</symbol><char>'%R'</char><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
				<keyword>end</keyword>
				<local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_i.xml#f_flush_buffer</location>flush_buffer</feature>
				<local>keys_count</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>count</feature>
				<keyword>from</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>start</feature>
				<keyword>until</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>off</feature>
				<keyword>loop</keyword>
					<local>key_index</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>index</feature>
					<local>paragraph_format</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_formats</location>all_paragraph_formats</feature><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>item</feature><symbol>)</symbol>
					<keyword>check</keyword>
							<local>paragraph_format</local> <symbol>/=</symbol> <keyword>Void</keyword>
					<keyword>then</keyword>
					<keyword>end</keyword>
					<keyword>if</keyword> <local>key_index</local> <symbol>&lt;</symbol> <local>keys_count</local> <keyword>then</keyword>
						<local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_i.xml#f_format_paragraph</location>format_paragraph</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_indexes</location>all_paragraph_indexes</feature><dot>.</dot><feature><include>False</include>i_th</feature><symbol> </symbol><symbol>(</symbol><local>key_index</local><symbol>)</symbol><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_indexes</location>all_paragraph_indexes</feature><dot>.</dot><feature><include>False</include>i_th</feature><symbol> </symbol><symbol>(</symbol><local>key_index</local> <symbol>+</symbol> <number>1</number><symbol>)</symbol><symbol>,</symbol> <local>paragraph_format</local><symbol>)</symbol>
					<keyword>else</keyword>
						<local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_i.xml#f_format_paragraph</location>format_paragraph</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_indexes</location>all_paragraph_indexes</feature><dot>.</dot><feature><include>False</include>i_th</feature><symbol> </symbol><symbol>(</symbol><local>key_index</local><symbol>)</symbol><symbol>,</symbol> <local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_text_component_i.xml#f_text_length</location>text_length</feature><symbol>,</symbol> <local>paragraph_format</local><symbol>)</symbol>
					<keyword>end</keyword>
					<keyword>if</keyword> <local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_action_sequences_i.xml#f_file_access_actions_internal</location>file_access_actions_internal</feature> <symbol>/=</symbol> <keyword>Void</keyword> <keyword>then</keyword>
						<local>current_load_value</local> <symbol>:=</symbol> <number>90</number> <symbol>+</symbol> <symbol>(</symbol><symbol>(</symbol><local>key_index</local> <symbol>*</symbol> <number>10</number><symbol>)</symbol> <symbol>//</symbol> <local>keys_count</local><symbol>)</symbol>
						<keyword>if</keyword> <local>current_load_value</local> <symbol>/=</symbol> <local>last_load_value</local> <keyword>then</keyword>
							<local>last_load_value</local> <symbol>:=</symbol> <local>current_load_value</local>
							<local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_action_sequences_i.xml#f_file_access_actions</location>file_access_actions</feature><dot>.</dot><feature><location>../interface/ev_lite_action_sequence.xml#f_call</location>call</feature><symbol> </symbol><symbol>(</symbol><symbol>[</symbol><local>current_load_value</local><symbol>]</symbol><symbol>)</symbol>
						<keyword>end</keyword>
					<keyword>end</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>forth</feature>
				<keyword>end</keyword>
			<keyword>else</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_load_successful</location>last_load_successful</feature> <symbol>:=</symbol> <keyword>False</keyword>
			<keyword>end</keyword>
		<keyword>end</keyword>

	<anchor>f_last_load_successful</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_load_successful</location>last_load_successful</feature><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<comment>--</comment><comment> Was last call to </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_set_with_rtf</location>set_with_rtf</feature><comment> successful?</comment>

	<anchor>f_generate_complete_rtf_from_buffering</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_generate_complete_rtf_from_buffering</location>generate_complete_rtf_from_buffering</feature>
			<comment>--</comment><comment> Generate the rtf heading for buffered operations into </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><comment>.</comment>
			<comment>--</comment><comment> Current contents of </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><comment> are lost.</comment>
		<keyword>local</keyword>
			<local>old_internal_text</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature>
		<keyword>do</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_text</location>color_text</feature><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
			<local>old_internal_text</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature>
			<keyword>create</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><local>old_internal_text</local><dot>.</dot><feature><include>False</include>count</feature> <symbol>+</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature><dot>.</dot><feature><include>False</include>count</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;%R%N&quot;<symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_text</location>color_text</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;%R%N&quot;<symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><local>old_internal_text</local><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_internal_text</location>internal_text</feature><dot>.</dot><feature><include>False</include>append_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;%R%N&quot;<symbol>)</symbol>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <symbol>{</symbol>NONE<symbol>}</symbol> <comment>--</comment><comment> Implementation		</comment>

	<anchor>f_process_text</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_text</location>process_text</feature> <symbol>(</symbol><local>rtf_text</local><symbol>:</symbol> <class><include>False</include>STRING_8</class><symbol>;</symbol> <local>index</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Process RTF string </comment><quoted>rtf_text</quoted><comment> for text data from </comment><quoted>index</quoted><comment> until</comment>
			<comment>--</comment><comment> text is exhausted signified through encountering a control character.</comment>
		<keyword>require</keyword>
			<tag>rtf_text_not_void</tag><symbol>:</symbol> <local>rtf_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>valid_index</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>valid_index</feature><symbol> </symbol><symbol>(</symbol><local>index</local><symbol>)</symbol>
		<keyword>local</keyword>
			<local>l_index</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>text_completed</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<local>current_text</local><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<local>current_character</local><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
			<local>next_character</local><symbol>:</symbol> <class><include>False</include>CHARACTER_8</class>
			<local>l_new_line</local><symbol>,</symbol> <local>l_carriage_return</local><symbol>,</symbol> <local>l_closed_parenthesis</local><symbol>,</symbol> <local>l_open_parenthesis</local><symbol>,</symbol> <local>l_backslash</local><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
		<keyword>do</keyword>
			<keyword>create</keyword> <local>current_text</local><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>128</number><symbol>)</symbol>
			<keyword>from</keyword>
				<local>l_index</local> <symbol>:=</symbol> <number>1</number>
				<local>l_new_line</local> <symbol>:=</symbol> <char>'%N'</char><dot>.</dot><feature><include>False</include>to_character_32</feature>
				<local>l_carriage_return</local> <symbol>:=</symbol> <char>'%R'</char><dot>.</dot><feature><include>False</include>to_character_32</feature>
				<local>l_closed_parenthesis</local> <symbol>:=</symbol> <char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature>
				<local>l_open_parenthesis</local> <symbol>:=</symbol> <char>'{'</char><dot>.</dot><feature><include>False</include>to_character_32</feature>
				<local>l_backslash</local> <symbol>:=</symbol> <char>'\'</char><dot>.</dot><feature><include>False</include>to_character_32</feature>
			<keyword>until</keyword>
				<local>text_completed</local> <keyword>or</keyword> <local>l_index</local> <symbol>+</symbol> <local>index</local> <symbol>&gt;</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>count</feature>
			<keyword>loop</keyword>
				<local>current_character</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_get_character</location>get_character</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <local>l_index</local> <symbol>+</symbol> <local>index</local><symbol>)</symbol>
				<keyword>if</keyword> <local>current_character</local> <symbol>/=</symbol> <local>l_new_line</local> <keyword>and</keyword> <local>current_character</local> <symbol>/=</symbol> <local>l_carriage_return</local> <keyword>then</keyword>
					<keyword>if</keyword> <local>current_character</local> <symbol>=</symbol> <local>l_closed_parenthesis</local> <keyword>then</keyword>
						<local>text_completed</local> <symbol>:=</symbol> <keyword>True</keyword>
					<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <local>l_open_parenthesis</local> <keyword>then</keyword>
						<local>text_completed</local> <symbol>:=</symbol> <keyword>True</keyword>
						<local>l_index</local> <symbol>:=</symbol> <local>l_index</local> <symbol>-</symbol> <number>1</number>
					<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <local>l_backslash</local> <keyword>then</keyword>
						<local>next_character</local> <symbol>:=</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>l_index</local> <symbol>+</symbol> <local>index</local> <symbol>+</symbol> <number>1</number><symbol>)</symbol>
						<keyword>if</keyword> <local>next_character</local><dot>.</dot><feature><include>False</include>to_character_32</feature> <symbol>=</symbol> <local>l_closed_parenthesis</local> <keyword>or else</keyword> <local>next_character</local><dot>.</dot><feature><include>False</include>to_character_32</feature> <symbol>=</symbol> <local>l_open_parenthesis</local> <keyword>or else</keyword> <local>next_character</local><dot>.</dot><feature><include>False</include>to_character_32</feature> <symbol>=</symbol> <local>l_backslash</local> <keyword>then</keyword>
							<local>current_character</local> <symbol>:=</symbol> <local>next_character</local><dot>.</dot><feature><include>False</include>to_character_32</feature>
							<local>l_index</local> <symbol>:=</symbol> <local>l_index</local> <symbol>+</symbol> <number>1</number>
						<keyword>else</keyword>
							<local>text_completed</local> <symbol>:=</symbol> <keyword>True</keyword>
							<local>l_index</local> <symbol>:=</symbol> <local>l_index</local> <symbol>-</symbol> <number>1</number>
						<keyword>end</keyword>
					<keyword>end</keyword>
					<keyword>if</keyword> <keyword>not</keyword> <local>text_completed</local> <keyword>then</keyword>
						<local>current_text</local><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><local>current_character</local><symbol>)</symbol>
					<keyword>end</keyword>
				<keyword>end</keyword>
				<local>l_index</local> <symbol>:=</symbol> <local>l_index</local> <symbol>+</symbol> <number>1</number>
			<keyword>end</keyword>
			<keyword>if</keyword> <local>current_text</local><dot>.</dot><feature><include>False</include>count</feature> <symbol>&gt;</symbol> <number>0</number> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><local>l_index</local> <symbol>-</symbol> <number>1</number><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_buffer_formatting</location>buffer_formatting</feature><symbol> </symbol><symbol>(</symbol><local>current_text</local><symbol>)</symbol>
			<keyword>end</keyword>
		<keyword>end</keyword>

	<anchor>f_buffer_formatting</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_buffer_formatting</location>buffer_formatting</feature> <symbol>(</symbol><local>a_text</local><symbol>:</symbol> <class><include>False</include>STRING_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Buffer </comment><quoted>a_text</quoted><comment> into </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature><comment> with formatting applied from </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_format</location>current_format</feature><comment>.</comment>
		<keyword>require</keyword>
			<tag>a_text_not_void</tag><symbol>:</symbol> <local>a_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>a_text_not_empty</tag><symbol>:</symbol> <keyword>not</keyword> <local>a_text</local><dot>.</dot><feature><include>False</include>is_empty</feature>
		<keyword>local</keyword>
			<local>character_format</local><symbol>:</symbol> <keyword>detachable</keyword> <class><location>../interface/ev_character_format.xml</location>EV_CHARACTER_FORMAT</class>
			<local>a_font</local><symbol>:</symbol> <class><location>../interface/ev_font.xml</location>EV_FONT</class>
			<local>effects</local><symbol>:</symbol> <class><location>../interface/ev_character_format_effects.xml</location>EV_CHARACTER_FORMAT_EFFECTS</class>
			<local>paragraph_format</local><symbol>:</symbol> <class><location>../interface/ev_paragraph_format.xml</location>EV_PARAGRAPH_FORMAT</class>
			<local>l_current_format</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_format</location>current_format</feature>
			<local>l_rich_text</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature>
		<keyword>do</keyword>
			<local>l_current_format</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_format</location>current_format</feature>
			<keyword>check</keyword>
					<local>l_current_format</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<keyword>then</keyword>
			<keyword>end</keyword>
			<local>l_rich_text</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature>
			<keyword>check</keyword>
					<local>l_rich_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<keyword>then</keyword>
			<keyword>end</keyword>
			<keyword>if</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_formats</location>all_formats</feature> <keyword>as</keyword> l_formats <keyword>then</keyword>
				<local>character_format</local> <symbol>:=</symbol> <local>l_formats</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_character_format_out</location>character_format_out</feature><symbol>)</symbol>
				<keyword>if</keyword> <local>character_format</local> <symbol>=</symbol> <keyword>Void</keyword> <keyword>then</keyword>
					<keyword>create</keyword> <local>character_format</local>
					<keyword>if</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_first_color_is_auto</location>first_color_is_auto</feature> <keyword>and</keyword> <local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_text_color</location>text_color</feature> <symbol>=</symbol> <number>0</number> <keyword>then</keyword>
						<local>character_format</local><dot>.</dot><feature><location>../interface/ev_character_format.xml#f_set_color</location>set_color</feature><symbol> </symbol><symbol>(</symbol><local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_colorizable_i.xml#f_foreground_color</location>foreground_color</feature><symbol>)</symbol>
					<keyword>elseif</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_colors</location>all_colors</feature> <keyword>as</keyword> l_colors <keyword>and then</keyword> <keyword>attached</keyword> <local>l_colors</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_text_color</location>text_color</feature><symbol>)</symbol> <keyword>as</keyword> l_color <keyword>then</keyword>
						<local>character_format</local><dot>.</dot><feature><location>../interface/ev_character_format.xml#f_set_color</location>set_color</feature><symbol> </symbol><symbol>(</symbol><local>l_color</local><symbol>)</symbol>
					<keyword>end</keyword>
					<keyword>if</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_first_color_is_auto</location>first_color_is_auto</feature> <keyword>and</keyword> <local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_highlight_color</location>highlight_color</feature> <symbol>=</symbol> <number>0</number> <keyword>then</keyword>
						<local>character_format</local><dot>.</dot><feature><location>../interface/ev_character_format.xml#f_set_background_color</location>set_background_color</feature><symbol> </symbol><symbol>(</symbol><local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_colorizable_i.xml#f_background_color</location>background_color</feature><symbol>)</symbol>
					<keyword>elseif</keyword> <local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_highlight_set</location>highlight_set</feature> <keyword>and then</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_colors</location>all_colors</feature> <keyword>as</keyword> l_colors <keyword>and then</keyword> <keyword>attached</keyword> <local>l_colors</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_highlight_color</location>highlight_color</feature><symbol>)</symbol> <keyword>as</keyword> l_color <keyword>then</keyword>
						<local>character_format</local><dot>.</dot><feature><location>../interface/ev_character_format.xml#f_set_background_color</location>set_background_color</feature><symbol> </symbol><symbol>(</symbol><local>l_color</local><symbol>)</symbol>
					<keyword>end</keyword>
					<keyword>if</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_fonts</location>all_fonts</feature> <keyword>as</keyword> l_fonts <keyword>and then</keyword> <keyword>attached</keyword> <local>l_fonts</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_character_format</location>character_format</feature><symbol>)</symbol> <keyword>as</keyword> l_font <keyword>then</keyword>
						<local>a_font</local> <symbol>:=</symbol> <local>l_font</local><dot>.</dot><feature><include>False</include>twin</feature>
						<keyword>if</keyword> <local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_is_bold</location>is_bold</feature> <keyword>then</keyword>
							<local>a_font</local><dot>.</dot><feature><location>../interface/ev_font.xml#f_set_weight</location>set_weight</feature><symbol> </symbol><symbol>(</symbol><symbol>{</symbol><class><location>../interface/ev_font_constants.xml</location>EV_FONT_CONSTANTS</class><symbol>}</symbol><dot>.</dot><feature><location>../interface/ev_font_constants.xml#f_weight_bold</location>weight_bold</feature><symbol>)</symbol>
						<keyword>end</keyword>
						<keyword>if</keyword> <local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_is_italic</location>is_italic</feature> <keyword>then</keyword>
							<local>a_font</local><dot>.</dot><feature><location>../interface/ev_font.xml#f_set_shape</location>set_shape</feature><symbol> </symbol><symbol>(</symbol><symbol>{</symbol><class><location>../interface/ev_font_constants.xml</location>EV_FONT_CONSTANTS</class><symbol>}</symbol><dot>.</dot><feature><location>../interface/ev_font_constants.xml#f_shape_italic</location>shape_italic</feature><symbol>)</symbol>
						<keyword>end</keyword>
						<keyword>create</keyword> <local>effects</local>
						<keyword>if</keyword> <local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_is_striked_out</location>is_striked_out</feature> <keyword>then</keyword>
							<local>effects</local><dot>.</dot><feature><location>../interface/ev_character_format_effects.xml#f_enable_striked_out</location>enable_striked_out</feature>
						<keyword>end</keyword>
						<keyword>if</keyword> <local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_is_underlined</location>is_underlined</feature> <keyword>then</keyword>
							<local>effects</local><dot>.</dot><feature><location>../interface/ev_character_format_effects.xml#f_enable_underlined</location>enable_underlined</feature>
						<keyword>end</keyword>
						<local>effects</local><dot>.</dot><feature><location>../interface/ev_character_format_effects.xml#f_set_vertical_offset</location>set_vertical_offset</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_half_points_to_pixels</location>half_points_to_pixels</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_vertical_offset</location>vertical_offset</feature><symbol>)</symbol><symbol>)</symbol>
						<local>character_format</local><dot>.</dot><feature><location>../interface/ev_character_format.xml#f_set_effects</location>set_effects</feature><symbol> </symbol><symbol>(</symbol><local>effects</local><symbol>)</symbol>
						<local>a_font</local><dot>.</dot><feature><location>../interface/ev_font.xml#f_set_height_in_points</location>set_height_in_points</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_font_height</location>font_height</feature> <symbol>//</symbol> <number>2</number><symbol>)</symbol>
						<local>character_format</local><dot>.</dot><feature><location>../interface/ev_character_format.xml#f_set_font</location>set_font</feature><symbol> </symbol><symbol>(</symbol><local>a_font</local><symbol>)</symbol>
						<local>l_formats</local><dot>.</dot><feature><include>False</include>put</feature><symbol> </symbol><symbol>(</symbol><local>character_format</local><symbol>,</symbol> <local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_character_format_out</location>character_format_out</feature><symbol>)</symbol>
					<keyword>end</keyword>
				<keyword>end</keyword>
			<keyword>end</keyword>
			<keyword>if</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_formats</location>all_paragraph_formats</feature> <keyword>and then</keyword> <symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_formats</location>all_paragraph_formats</feature><dot>.</dot><feature><include>False</include>is_empty</feature> <keyword>or else</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_formats</location>all_paragraph_formats</feature><dot>.</dot><feature><include>False</include>has</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_paragraph_format_out</location>paragraph_format_out</feature><symbol>)</symbol><symbol>)</symbol> <keyword>then</keyword>
				<keyword>create</keyword> <local>paragraph_format</local>
				<local>paragraph_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_set_alignment</location>set_alignment</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_alignment</location>alignment</feature><symbol>)</symbol>
				<local>paragraph_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_set_left_margin</location>set_left_margin</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_left_margin</location>left_margin</feature><symbol>)</symbol>
				<local>paragraph_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_set_right_margin</location>set_right_margin</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_right_margin</location>right_margin</feature><symbol>)</symbol>
				<local>paragraph_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_set_top_spacing</location>set_top_spacing</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_top_spacing</location>top_spacing</feature><symbol>)</symbol>
				<local>paragraph_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_set_bottom_spacing</location>set_bottom_spacing</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_bottom_spacing</location>bottom_spacing</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_formats</location>all_paragraph_formats</feature><dot>.</dot><feature><include>False</include>put</feature><symbol> </symbol><symbol>(</symbol><local>paragraph_format</local><symbol>,</symbol> <local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_paragraph_format_out</location>paragraph_format_out</feature><symbol>)</symbol>
			<keyword>end</keyword>
			<keyword>if</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature> <keyword>and then</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_indexes</location>all_paragraph_indexes</feature> <keyword>and then</keyword> <symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>is_empty</feature> <keyword>or else</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>last</feature><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_paragraph_format_out</location>paragraph_format_out</feature><symbol>)</symbol><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_paragraph_format_out</location>paragraph_format_out</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_indexes</location>all_paragraph_indexes</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_number_of_characters_opened</location>number_of_characters_opened</feature> <symbol>+</symbol> <number>1</number><symbol>)</symbol>
			<keyword>end</keyword>
			<keyword>if</keyword> <local>character_format</local> <symbol>/=</symbol> <keyword>Void</keyword> <keyword>then</keyword>
				<local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_i.xml#f_buffered_append</location>buffered_append</feature><symbol> </symbol><symbol>(</symbol><local>a_text</local><symbol>,</symbol> <local>character_format</local><symbol>)</symbol>
			<keyword>else</keyword>
				<local>l_rich_text</local><dot>.</dot><feature><location>../implementation_interface/ev_rich_text_i.xml#f_buffered_append</location>buffered_append</feature><symbol> </symbol><symbol>(</symbol><local>a_text</local><symbol>,</symbol> <keyword>create</keyword><symbol> </symbol><symbol>{</symbol><class><location>../interface/ev_character_format.xml</location>EV_CHARACTER_FORMAT</class><symbol>}</symbol><symbol>)</symbol>
			<keyword>end</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_number_of_characters_opened</location>number_of_characters_opened</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_number_of_characters_opened</location>number_of_characters_opened</feature> <symbol>+</symbol> <local>a_text</local><dot>.</dot><feature><include>False</include>count</feature>
		<keyword>end</keyword>

	<anchor>f_get_character</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_get_character</location>get_character</feature> <symbol>(</symbol><local>rtf_text</local><symbol>:</symbol> <class><include>False</include>STRING_8</class><symbol>;</symbol> <local>index</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
			<comment>--</comment><comment> </comment><quoted>Result</quoted><comment> is character </comment><quoted>index</quoted><comment> within </comment><quoted>rtf_text</quoted><comment>.</comment>
		<keyword>require</keyword>
			<tag>rtf_text_not_void</tag><symbol>:</symbol> <local>rtf_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>valid_index</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>valid_index</feature><symbol> </symbol><symbol>(</symbol><local>index</local><symbol>)</symbol>
		<keyword>do</keyword>
			<keyword>Result</keyword> <symbol>:=</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>index</local><symbol>)</symbol><dot>.</dot><feature><include>False</include>to_character_32</feature>
			<keyword>if</keyword> <local>index</local> <symbol>&gt;</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_highest_read_char</location>highest_read_char</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_highest_read_char</location>highest_read_char</feature> <symbol>:=</symbol> <local>index</local>
				<keyword>if</keyword> <keyword>Result</keyword> <symbol>=</symbol> <char>'{'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_depth</location>current_depth</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_depth</location>current_depth</feature> <symbol>+</symbol> <number>1</number>
				<keyword>elseif</keyword> <keyword>Result</keyword> <symbol>=</symbol> <char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_depth</location>current_depth</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_depth</location>current_depth</feature> <symbol>-</symbol> <number>1</number>
				<keyword>end</keyword>
			<keyword>end</keyword>
		<keyword>end</keyword>

	<anchor>f_highest_read_char</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_highest_read_char</location>highest_read_char</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Highest character index already read. This prevents us from increasing or</comment>
			<comment>--</comment><comment> decreasing the &quot;depth&quot; of the document if a &quot;{&quot; or &quot;}&quot; character is read twice.</comment>

	<anchor>f_process_keyword</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_keyword</location>process_keyword</feature> <symbol>(</symbol><local>rtf_text</local><symbol>:</symbol> <class><include>False</include>STRING_8</class><symbol>;</symbol> <local>index</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Process RTF string </comment><quoted>rtf_text</quoted><comment> for a keyword starting at position </comment><quoted>index</quoted>
			<comment>--</comment><comment> until a rtf character is received signifying the end of the keyword.</comment>
		<keyword>require</keyword>
			<tag>rtf_text_not_void</tag><symbol>:</symbol> <local>rtf_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>valid_index</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>valid_index</feature><symbol> </symbol><symbol>(</symbol><local>index</local><symbol>)</symbol>
		<keyword>local</keyword>
			<local>l_index</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>current_character</local><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
			<local>tag</local><symbol>,</symbol> <local>l_char</local><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<local>tag_value</local><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<local>performed_one_iteration</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<local>tag_completed</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<local>reading_tag_value</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<local>tag_start_position</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>processing_moved_iterator</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<local>l_current_format</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_format</location>current_format</feature>
		<keyword>do</keyword>
			<local>l_current_format</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_format</location>current_format</feature>
			<keyword>check</keyword>
					<local>l_current_format</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<keyword>then</keyword>
			<keyword>end</keyword>
			<local>tag_start_position</local> <symbol>:=</symbol> <local>index</local>
			<keyword>create</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>make_empty</feature>
			<keyword>create</keyword> <local>tag_value</local><dot>.</dot><feature><include>False</include>make_empty</feature>
			<local>current_character</local> <symbol>:=</symbol> <char>' '</char><dot>.</dot><feature><include>False</include>to_character_32</feature>
			<keyword>from</keyword>
				<local>l_index</local> <symbol>:=</symbol> <number>1</number>
			<keyword>until</keyword>
				<local>tag_completed</local>
			<keyword>loop</keyword>
				<local>current_character</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_get_character</location>get_character</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <local>l_index</local> <symbol>+</symbol> <local>index</local><symbol>)</symbol>
				<keyword>inspect</keyword> <local>current_character</local>
				<keyword>when</keyword> <char>' '</char><symbol>,</symbol> <char>'\'</char><symbol>,</symbol> <char>'}'</char><symbol>,</symbol> <char>'{'</char><symbol>,</symbol> <char>'%N'</char><symbol>,</symbol> <char>'%R'</char><symbol>,</symbol> <char>';'</char> <keyword>then</keyword>
					<keyword>if</keyword> <local>performed_one_iteration</local> <keyword>then</keyword>
						<local>tag_completed</local> <symbol>:=</symbol> <keyword>True</keyword>
					<keyword>end</keyword>
				<keyword>when</keyword> <char>'0'</char><symbol>..</symbol><char>'9'</char> <keyword>then</keyword>
					<local>reading_tag_value</local> <symbol>:=</symbol> <keyword>True</keyword>
				<keyword>else</keyword>
				<keyword>end</keyword>
				<keyword>if</keyword> <keyword>not</keyword> <local>tag_completed</local> <keyword>then</keyword>
					<keyword>if</keyword> <local>current_character</local> <symbol>/=</symbol> <char>'%N'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
						<keyword>if</keyword> <keyword>not</keyword> <local>reading_tag_value</local> <keyword>then</keyword>
							<local>tag</local><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><local>current_character</local><symbol>)</symbol>
						<keyword>else</keyword>
							<local>tag_value</local><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><local>current_character</local><symbol>)</symbol>
						<keyword>end</keyword>
						<local>performed_one_iteration</local> <symbol>:=</symbol> <keyword>True</keyword>
					<keyword>end</keyword>
					<local>l_index</local> <symbol>:=</symbol> <local>l_index</local> <symbol>+</symbol> <number>1</number>
				<keyword>end</keyword>
			<keyword>end</keyword>
			<keyword>if</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_tab_tag_string</location>Tab_tag_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_buffer_formatting</location>buffer_formatting</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_tab_string</location>Tab_string</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_color_string</location>Rtf_color_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_text_color</location>set_text_color</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_line_string</location>Line_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_buffer_formatting</location>buffer_formatting</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_new_line_string</location>New_line_string</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_unicode_string</location>Rtf_unicode_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>tag_value</local><dot>.</dot><feature><include>False</include>remove_tail</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
				<keyword>create</keyword> <local>l_char</local><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
				<local>l_char</local><dot>.</dot><feature><include>False</include>append_code</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer_32</feature><dot>.</dot><feature><include>False</include>as_natural_32</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_buffer_formatting</location>buffer_formatting</feature><symbol> </symbol><symbol>(</symbol><local>l_char</local><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_bold_string</location>Rtf_bold_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<keyword>if</keyword> <local>tag_value</local><dot>.</dot><feature><include>False</include>is_empty</feature> <keyword>then</keyword>
					<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_bold</location>set_bold</feature><symbol> </symbol><symbol>(</symbol><keyword>True</keyword><symbol>)</symbol>
				<keyword>else</keyword>
					<keyword>check</keyword>
						<tag>tag_is_zero</tag><symbol>:</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;0&quot;<symbol>)</symbol>
					<keyword>end</keyword>
					<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_bold</location>set_bold</feature><symbol> </symbol><symbol>(</symbol><keyword>False</keyword><symbol>)</symbol>
				<keyword>end</keyword>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_italic_string</location>Rtf_italic_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<keyword>if</keyword> <local>tag_value</local><dot>.</dot><feature><include>False</include>is_empty</feature> <keyword>then</keyword>
					<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_italic</location>set_italic</feature><symbol> </symbol><symbol>(</symbol><keyword>True</keyword><symbol>)</symbol>
				<keyword>else</keyword>
					<keyword>check</keyword>
						<tag>tag_is_zero</tag><symbol>:</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;0&quot;<symbol>)</symbol>
					<keyword>end</keyword>
					<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_italic</location>set_italic</feature><symbol> </symbol><symbol>(</symbol><keyword>False</keyword><symbol>)</symbol>
				<keyword>end</keyword>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_strikeout_string</location>Rtf_strikeout_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<keyword>if</keyword> <local>tag_value</local><dot>.</dot><feature><include>False</include>is_empty</feature> <keyword>then</keyword>
					<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_striked_out</location>set_striked_out</feature><symbol> </symbol><symbol>(</symbol><keyword>True</keyword><symbol>)</symbol>
				<keyword>else</keyword>
					<keyword>check</keyword>
						<tag>tag_is_zero</tag><symbol>:</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;0&quot;<symbol>)</symbol>
					<keyword>end</keyword>
					<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_striked_out</location>set_striked_out</feature><symbol> </symbol><symbol>(</symbol><keyword>False</keyword><symbol>)</symbol>
				<keyword>end</keyword>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_underline_string</location>Rtf_underline_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<keyword>if</keyword> <local>tag_value</local><dot>.</dot><feature><include>False</include>is_empty</feature> <keyword>then</keyword>
					<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_underlined</location>set_underlined</feature><symbol> </symbol><symbol>(</symbol><keyword>True</keyword><symbol>)</symbol>
				<keyword>else</keyword>
					<keyword>check</keyword>
						<tag>tag_is_zero</tag><symbol>:</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;0&quot;<symbol>)</symbol>
					<keyword>end</keyword>
					<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_underlined</location>set_underlined</feature><symbol> </symbol><symbol>(</symbol><keyword>False</keyword><symbol>)</symbol>
				<keyword>end</keyword>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_underline_none_string</location>Rtf_underline_none_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_underlined</location>set_underlined</feature><symbol> </symbol><symbol>(</symbol><keyword>False</keyword><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_vertical_offset</location>Rtf_vertical_offset</feature><symbol>)</symbol> <keyword>then</keyword>
				<keyword>check</keyword>
					<tag>tag_not_empty</tag><symbol>:</symbol> <keyword>not</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_empty</feature>
				<keyword>end</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_vertical_offset</location>set_vertical_offset</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_highlight_string</location>Rtf_highlight_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_highlight_color</location>set_highlight_color</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_red</location>Rtf_red</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorred</location>last_colorred</feature> <symbol>:=</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_green</location>Rtf_green</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorgreen</location>last_colorgreen</feature> <symbol>:=</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_blue</location>Rtf_blue</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorblue</location>last_colorblue</feature> <symbol>:=</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_font_string</location>Rtf_font_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontindex</location>last_fontindex</feature> <symbol>:=</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_character_format</location>set_character_format</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_font_size_string</location>Rtf_font_size_string</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_font_height</location>set_font_height</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_charset</location>Rtf_charset</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontcharset</location>last_fontcharset</feature> <symbol>:=</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_nill</location>Rtf_family_nill</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontfamily</location>last_fontfamily</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_nill_int</location>Rtf_family_nill_int</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_modern</location>Rtf_family_modern</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontfamily</location>last_fontfamily</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_modern_int</location>Rtf_family_modern_int</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_roman</location>Rtf_family_roman</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontfamily</location>last_fontfamily</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_roman_int</location>Rtf_family_roman_int</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_script</location>Rtf_family_script</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontfamily</location>last_fontfamily</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_script_int</location>Rtf_family_script_int</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_swiss</location>Rtf_family_swiss</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontfamily</location>last_fontfamily</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_swiss_int</location>Rtf_family_swiss_int</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_tech</location>Rtf_family_tech</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontfamily</location>last_fontfamily</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_tech_int</location>Rtf_family_tech_int</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_font_size_string</location>Rtf_font_size_string</feature><symbol>)</symbol> <keyword>then</keyword>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_newline</location>Rtf_newline</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_buffer_formatting</location>buffer_formatting</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_new_line_string</location>New_line_string</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_user_props</location>Rtf_user_props</feature><symbol>)</symbol> <keyword>then</keyword>
				<keyword>check</keyword>
					<tag>is_start_of_group</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>substring</feature><symbol> </symbol><symbol>(</symbol><local>tag_start_position</local> <symbol>-</symbol> <number>1</number><symbol>,</symbol> <local>tag_start_position</local> <symbol>+</symbol> <number>1</number><symbol>)</symbol><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;{\*&quot;<symbol>)</symbol>
				<keyword>end</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_to_end_of_tag</location>move_to_end_of_tag</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <local>tag_start_position</local> <symbol>-</symbol> <number>1</number><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_info</location>Rtf_info</feature><symbol>)</symbol> <keyword>then</keyword>
				<keyword>check</keyword>
					<tag>is_start_of_group</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>substring</feature><symbol> </symbol><symbol>(</symbol><local>tag_start_position</local> <symbol>-</symbol> <number>1</number><symbol>,</symbol> <local>tag_start_position</local><symbol>)</symbol><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;{\&quot;<symbol>)</symbol>
				<keyword>end</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_to_end_of_tag</location>move_to_end_of_tag</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <local>tag_start_position</local> <symbol>-</symbol> <number>1</number><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_stylesheet</location>Rtf_stylesheet</feature><symbol>)</symbol> <keyword>then</keyword>
				<keyword>check</keyword>
					<tag>is_start_of_group</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>substring</feature><symbol> </symbol><symbol>(</symbol><local>tag_start_position</local> <symbol>-</symbol> <number>1</number><symbol>,</symbol> <local>tag_start_position</local><symbol>)</symbol><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;{\&quot;<symbol>)</symbol>
				<keyword>end</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_to_end_of_tag</location>move_to_end_of_tag</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <local>tag_start_position</local> <symbol>-</symbol> <number>1</number><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_new_paragraph</location>Rtf_new_paragraph</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_reset_paragraph</location>reset_paragraph</feature>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_left_aligned</location>Rtf_paragraph_left_aligned</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_alignment</location>set_alignment</feature><symbol> </symbol><symbol>(</symbol><symbol>{</symbol><class><location>../interface/ev_paragraph_constants.xml</location>EV_PARAGRAPH_CONSTANTS</class><symbol>}</symbol><dot>.</dot><feature><location>../interface/ev_paragraph_constants.xml#f_alignment_left</location>alignment_left</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_center_aligned</location>Rtf_paragraph_center_aligned</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_alignment</location>set_alignment</feature><symbol> </symbol><symbol>(</symbol><symbol>{</symbol><class><location>../interface/ev_paragraph_constants.xml</location>EV_PARAGRAPH_CONSTANTS</class><symbol>}</symbol><dot>.</dot><feature><location>../interface/ev_paragraph_constants.xml#f_alignment_center</location>alignment_center</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_right_aligned</location>Rtf_paragraph_right_aligned</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_alignment</location>set_alignment</feature><symbol> </symbol><symbol>(</symbol><symbol>{</symbol><class><location>../interface/ev_paragraph_constants.xml</location>EV_PARAGRAPH_CONSTANTS</class><symbol>}</symbol><dot>.</dot><feature><location>../interface/ev_paragraph_constants.xml#f_alignment_right</location>alignment_right</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_justified</location>Rtf_paragraph_justified</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_alignment</location>set_alignment</feature><symbol> </symbol><symbol>(</symbol><symbol>{</symbol><class><location>../interface/ev_paragraph_constants.xml</location>EV_PARAGRAPH_CONSTANTS</class><symbol>}</symbol><dot>.</dot><feature><location>../interface/ev_paragraph_constants.xml#f_alignment_justified</location>alignment_justified</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_left_indent</location>Rtf_paragraph_left_indent</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_left_margin</location>set_left_margin</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_half_points_to_pixels</location>half_points_to_pixels</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature><symbol>)</symbol> <symbol>//</symbol> <number>10</number><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_right_indent</location>Rtf_paragraph_right_indent</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_right_margin</location>set_right_margin</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_half_points_to_pixels</location>half_points_to_pixels</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature><symbol>)</symbol> <symbol>//</symbol> <number>10</number><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_space_before</location>Rtf_paragraph_space_before</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_top_spacing</location>set_top_spacing</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_half_points_to_pixels</location>half_points_to_pixels</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature><symbol>)</symbol> <symbol>//</symbol> <number>10</number><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_space_after</location>Rtf_paragraph_space_after</feature><symbol>)</symbol> <keyword>then</keyword>
				<local>l_current_format</local><dot>.</dot><feature><location>../implementation_interface/rtf_format_i.xml#f_set_bottom_spacing</location>set_bottom_spacing</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_half_points_to_pixels</location>half_points_to_pixels</feature><symbol> </symbol><symbol>(</symbol><local>tag_value</local><dot>.</dot><feature><include>False</include>to_integer</feature><symbol>)</symbol> <symbol>//</symbol> <number>10</number><symbol>)</symbol>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_fonttable</location>Rtf_fonttable</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_fonttable</location>process_fonttable</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>)</symbol>
				<local>processing_moved_iterator</local> <symbol>:=</symbol> <keyword>True</keyword>
			<keyword>elseif</keyword> <local>tag</local><dot>.</dot><feature><include>False</include>is_equal</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_colortbl</location>Rtf_colortbl</feature><symbol>)</symbol> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_colortable</location>process_colortable</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>)</symbol>
				<local>processing_moved_iterator</local> <symbol>:=</symbol> <keyword>True</keyword>
			<keyword>end</keyword>
			<keyword>if</keyword> <keyword>not</keyword> <local>processing_moved_iterator</local> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><local>tag</local><dot>.</dot><feature><include>False</include>count</feature> <symbol>+</symbol> <local>tag_value</local><dot>.</dot><feature><include>False</include>count</feature> <symbol>+</symbol> <number>1</number><symbol>)</symbol>
			<keyword>end</keyword>
		<keyword>end</keyword>

	<anchor>f_new_line_string</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_new_line_string</location>New_line_string</feature><symbol>:</symbol> <class><include>False</include>STRING_32</class> <symbol>=</symbol> &quot;%N&quot;

	<anchor>f_tab_string</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_tab_string</location>Tab_string</feature><symbol>:</symbol> <class><include>False</include>STRING_32</class> <symbol>=</symbol> &quot;%T&quot;

	<anchor>f_tab_tag_string</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_tab_tag_string</location>Tab_tag_string</feature><symbol>:</symbol> <class><include>False</include>STRING_32</class> <symbol>=</symbol> &quot;tab&quot;

	<anchor>f_line_string</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_line_string</location>Line_string</feature><symbol>:</symbol> <class><include>False</include>STRING_32</class> <symbol>=</symbol> &quot;line&quot;
			<comment>--</comment><comment> String constants</comment>

	<anchor>f_move_to_end_of_tag</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_to_end_of_tag</location>move_to_end_of_tag</feature> <symbol>(</symbol><local>rtf_text</local><symbol>:</symbol> <class><include>False</include>STRING_8</class><symbol>;</symbol> <local>start_index</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Move </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><comment> to the next character immediately following the closing brace</comment>
			<comment>--</comment><comment> associated with the opening brace at </comment><quoted>start_index</quoted><comment> within RTF text </comment><quoted>rtf_text</quoted>
			<comment>--</comment><comment> This includes the depth of the brace, and will find the brace pair, not just the next closing brace.</comment>
		<keyword>require</keyword>
			<tag>rtf_text_not_void</tag><symbol>:</symbol> <local>rtf_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>valid_index</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>valid_index</feature><symbol> </symbol><symbol>(</symbol><local>start_index</local><symbol>)</symbol>
			<tag>index_points_to_start_tag</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>start_index</local><symbol>)</symbol> <symbol>=</symbol> <char>'{'</char>
		<keyword>local</keyword>
			<local>l_index</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>depth</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>current_character</local><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
		<keyword>do</keyword>
			<local>depth</local> <symbol>:=</symbol> <number>1</number>
			<keyword>from</keyword>
				<local>l_index</local> <symbol>:=</symbol> <number>1</number>
			<keyword>until</keyword>
				<local>depth</local> <symbol>=</symbol> <number>0</number>
			<keyword>loop</keyword>
				<local>current_character</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_get_character</location>get_character</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <local>start_index</local> <symbol>+</symbol> <local>l_index</local><symbol>)</symbol>
				<keyword>if</keyword> <local>current_character</local> <symbol>=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_open_brace_character</location>Rtf_open_brace_character</feature><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<local>depth</local> <symbol>:=</symbol> <local>depth</local> <symbol>+</symbol> <number>1</number>
				<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_close_brace_character</location>Rtf_close_brace_character</feature><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<local>depth</local> <symbol>:=</symbol> <local>depth</local> <symbol>-</symbol> <number>1</number>
				<keyword>end</keyword>
				<keyword>if</keyword> <local>depth</local> <symbol>/=</symbol> <number>0</number> <keyword>then</keyword>
					<local>l_index</local> <symbol>:=</symbol> <local>l_index</local> <symbol>+</symbol> <number>1</number>
				<keyword>end</keyword>
			<keyword>end</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><local>l_index</local> <symbol>-</symbol> <number>1</number><symbol>)</symbol>
		<keyword>end</keyword>

	<anchor>f_process_fonttable</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_fonttable</location>process_fonttable</feature> <symbol>(</symbol><local>rtf_text</local><symbol>:</symbol> <class><include>False</include>STRING_8</class><symbol>)</symbol>
			<comment>--</comment><comment> Process fonttable contained in </comment><quoted>rtf_text</quoted><comment>, the contents of which</comment>
			<comment>--</comment><comment> start at character index </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><comment>.</comment>
		<keyword>require</keyword>
			<tag>pointing_to_fonttable</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>substring</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>+</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_fonttable</location>Rtf_fonttable</feature><dot>.</dot><feature><include>False</include>count</feature><symbol>)</symbol><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_control_character</location>Rtf_control_character</feature><dot>.</dot><feature><include>False</include>out</feature> <symbol>+</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_fonttable</location>Rtf_fonttable</feature><symbol>)</symbol>
		<keyword>local</keyword>
			<local>depth</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>current_character</local><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
		<keyword>do</keyword>
			<local>depth</local> <symbol>:=</symbol> <number>1</number>
			<keyword>from</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
			<keyword>until</keyword>
				<local>depth</local> <symbol>=</symbol> <number>0</number>
			<keyword>loop</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_update_main_iterator</location>update_main_iterator</feature>
				<local>current_character</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_get_character</location>get_character</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>)</symbol>
				<keyword>if</keyword> <local>current_character</local> <symbol>=</symbol> <char>'{'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<local>depth</local> <symbol>:=</symbol> <local>depth</local> <symbol>+</symbol> <number>1</number>
				<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<local>depth</local> <symbol>:=</symbol> <local>depth</local> <symbol>-</symbol> <number>1</number>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_font_to_all_fonts</location>add_font_to_all_fonts</feature>
				<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>'\'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_keyword</location>process_keyword</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>)</symbol>
				<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>' '</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>and then</keyword> <local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>+</symbol> <number>1</number><symbol>)</symbol> <symbol>/=</symbol> <char>'\'</char> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_update_main_iterator</location>update_main_iterator</feature>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_fontname</location>process_fontname</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>)</symbol>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_font_to_all_fonts</location>add_font_to_all_fonts</feature>
				<keyword>elseif</keyword> <local>current_character</local> <symbol>/=</symbol> <char>'%R'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>and</keyword> <symbol>(</symbol><local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>-</symbol> <number>1</number><symbol>)</symbol> <symbol>=</symbol> <char>'%N'</char> <keyword>or</keyword> <local>rtf_text</local><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>-</symbol> <number>1</number><symbol>)</symbol> <symbol>=</symbol> <char>'}'</char><symbol>)</symbol> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_fontname</location>process_fontname</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>)</symbol>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_font_to_all_fonts</location>add_font_to_all_fonts</feature>
				<keyword>end</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
			<keyword>end</keyword>
		<keyword>end</keyword>

	<anchor>f_add_font_to_all_fonts</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_font_to_all_fonts</location>add_font_to_all_fonts</feature>
			<comment>--</comment><comment> Create and add a new font to </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_fonts</location>all_fonts</feature><comment> at index </comment><quoted>last_font_index</quoted>
			<comment>--</comment><comment> based on </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontfamily</location>last_fontfamily</feature><comment> and </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontname</location>last_fontname</feature><comment>.</comment>
		<keyword>local</keyword>
			<local>a_font</local><symbol>:</symbol> <class><location>../interface/ev_font.xml</location>EV_FONT</class>
		<keyword>do</keyword>
			<keyword>create</keyword> <local>a_font</local>
			<keyword>inspect</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontfamily</location>last_fontfamily</feature>
			<keyword>when</keyword> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_roman_int</location>Rtf_family_roman_int</feature> <keyword>then</keyword>
				<local>a_font</local><dot>.</dot><feature><location>../interface/ev_font.xml#f_set_family</location>set_family</feature><symbol> </symbol><symbol>(</symbol><feature><location>../interface/ev_font_constants.xml#f_family_roman</location>Family_roman</feature><symbol>)</symbol>
			<keyword>when</keyword> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_swiss_int</location>Rtf_family_swiss_int</feature> <keyword>then</keyword>
				<local>a_font</local><dot>.</dot><feature><location>../interface/ev_font.xml#f_set_family</location>set_family</feature><symbol> </symbol><symbol>(</symbol><feature><location>../interface/ev_font_constants.xml#f_family_sans</location>Family_sans</feature><symbol>)</symbol>
			<keyword>when</keyword> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_modern_int</location>Rtf_family_modern_int</feature> <keyword>then</keyword>
				<local>a_font</local><dot>.</dot><feature><location>../interface/ev_font.xml#f_set_family</location>set_family</feature><symbol> </symbol><symbol>(</symbol><feature><location>../interface/ev_font_constants.xml#f_family_modern</location>Family_modern</feature><symbol>)</symbol>
			<keyword>when</keyword> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_script_int</location>Rtf_family_script_int</feature> <keyword>then</keyword>
				<local>a_font</local><dot>.</dot><feature><location>../interface/ev_font.xml#f_set_family</location>set_family</feature><symbol> </symbol><symbol>(</symbol><feature><location>../interface/ev_font_constants.xml#f_family_typewriter</location>Family_typewriter</feature><symbol>)</symbol>
			<keyword>when</keyword> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_tech_int</location>Rtf_family_tech_int</feature> <keyword>then</keyword>
				<local>a_font</local><dot>.</dot><feature><location>../interface/ev_font.xml#f_set_family</location>set_family</feature><symbol> </symbol><symbol>(</symbol><feature><location>../interface/ev_font_constants.xml#f_family_screen</location>Family_screen</feature><symbol>)</symbol>
			<keyword>else</keyword>
			<keyword>end</keyword>
			<keyword>if</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontname</location>last_fontname</feature> <keyword>as</keyword> l_last_fontname <keyword>and then</keyword> <keyword>not</keyword> <local>l_last_fontname</local><dot>.</dot><feature><include>False</include>is_empty</feature> <keyword>then</keyword>
				<local>a_font</local><dot>.</dot><feature><location>../interface/ev_font.xml#f_preferred_families</location>preferred_families</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><local>l_last_fontname</local><symbol>)</symbol>
			<keyword>end</keyword>
			<keyword>if</keyword> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_fonts</location>all_fonts</feature> <keyword>as</keyword> l_fonts <keyword>then</keyword>
				<local>l_fonts</local><dot>.</dot><feature><include>False</include>force</feature><symbol> </symbol><symbol>(</symbol><local>a_font</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontindex</location>last_fontindex</feature><symbol>)</symbol>
			<keyword>end</keyword>
		<keyword>end</keyword>

	<anchor>f_process_colortable</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_colortable</location>process_colortable</feature> <symbol>(</symbol><local>rtf_text</local><symbol>:</symbol> <class><include>False</include>STRING_8</class><symbol>)</symbol>
			<comment>--</comment><comment> Process colortable contained in </comment><quoted>rtf_text</quoted><comment>, the contents of which</comment>
			<comment>--</comment><comment> start at character index </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><comment>.</comment>
		<keyword>require</keyword>
			<tag>pointing_to_colortable</tag><symbol>:</symbol> <local>rtf_text</local><dot>.</dot><feature><include>False</include>substring</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>+</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_colortbl</location>Rtf_colortbl</feature><dot>.</dot><feature><include>False</include>count</feature><symbol>)</symbol><dot>.</dot><feature><include>False</include>same_string_general</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_control_character</location>Rtf_control_character</feature><dot>.</dot><feature><include>False</include>out</feature> <symbol>+</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_colortbl</location>Rtf_colortbl</feature><symbol>)</symbol>
		<keyword>local</keyword>
			<local>depth</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>current_character</local><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
			<local>a_color</local><symbol>:</symbol> <class><location>../interface/ev_color.xml</location>EV_COLOR</class>
			<local>l_colors</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_colors</location>all_colors</feature>
		<keyword>do</keyword>
			<local>l_colors</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_colors</location>all_colors</feature>
			<local>depth</local> <symbol>:=</symbol> <number>1</number>
			<keyword>from</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
			<keyword>until</keyword>
				<local>depth</local> <symbol>=</symbol> <number>0</number>
			<keyword>loop</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_update_main_iterator</location>update_main_iterator</feature>
				<local>current_character</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_get_character</location>get_character</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>)</symbol>
				<keyword>if</keyword> <local>current_character</local> <symbol>=</symbol> <char>'{'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<local>depth</local> <symbol>:=</symbol> <local>depth</local> <symbol>+</symbol> <number>1</number>
				<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<local>depth</local> <symbol>:=</symbol> <local>depth</local> <symbol>-</symbol> <number>1</number>
				<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>'\'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_keyword</location>process_keyword</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>)</symbol>
				<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>';'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<keyword>if</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorred</location>last_colorred</feature> <symbol>=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_initial_color_value</location>Initial_color_value</feature> <keyword>and</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorgreen</location>last_colorgreen</feature> <symbol>=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_initial_color_value</location>Initial_color_value</feature> <keyword>and</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorblue</location>last_colorblue</feature> <symbol>=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_initial_color_value</location>Initial_color_value</feature> <keyword>then</keyword>
						<keyword>create</keyword> <local>a_color</local>
						<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_first_color_is_auto</location>first_color_is_auto</feature> <symbol>:=</symbol> <keyword>True</keyword>
					<keyword>elseif</keyword> <local>l_colors</local> <symbol>/=</symbol> <keyword>Void</keyword> <keyword>then</keyword>
						<keyword>create</keyword> <local>a_color</local><dot>.</dot><feature><location>../interface/ev_color.xml#f_make_with_8_bit_rgb</location>make_with_8_bit_rgb</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorred</location>last_colorred</feature><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorgreen</location>last_colorgreen</feature><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorblue</location>last_colorblue</feature><symbol>)</symbol>
						<local>l_colors</local><dot>.</dot><feature><include>False</include>force</feature><symbol> </symbol><symbol>(</symbol><local>a_color</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorindex</location>last_colorindex</feature><symbol>)</symbol>
					<keyword>end</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorindex</location>last_colorindex</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorindex</location>last_colorindex</feature> <symbol>+</symbol> <number>1</number>
				<keyword>end</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
			<keyword>end</keyword>
		<keyword>end</keyword>

	<anchor>f_first_color_is_auto</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_first_color_is_auto</location>first_color_is_auto</feature><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<comment>--</comment><comment> Color at index </comment><quoted>0</quoted><comment> in the color table corresponds to the auto color.</comment>
			<comment>--</comment><comment> Any color references to this color must use either the foreground or</comment>
			<comment>--</comment><comment> background color of the control, instead of its actual value.</comment>

	<anchor>f_last_fontname</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontname</location>last_fontname</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>STRING_32</class>

	<anchor>f_last_colorindex</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorindex</location>last_colorindex</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>

	<anchor>f_last_fontindex</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontindex</location>last_fontindex</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>

	<anchor>f_last_fontcharset</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontcharset</location>last_fontcharset</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>

	<anchor>f_last_fontfamily</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontfamily</location>last_fontfamily</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>

	<anchor>f_last_colorred</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorred</location>last_colorred</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>

	<anchor>f_last_colorgreen</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorgreen</location>last_colorgreen</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>

	<anchor>f_last_colorblue</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_colorblue</location>last_colorblue</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Current values read in by parsing RTF.</comment>

	<anchor>f_all_fonts</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_fonts</location>all_fonts</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><location>../interface/ev_font.xml</location>EV_FONT</class><symbol>,</symbol> <class><include>False</include>INTEGER_32</class><symbol>]</symbol>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>

	<anchor>f_all_colors</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_colors</location>all_colors</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><location>../interface/ev_color.xml</location>EV_COLOR</class><symbol>,</symbol> <class><include>False</include>INTEGER_32</class><symbol>]</symbol>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>

	<anchor>f_all_formats</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_formats</location>all_formats</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><location>../interface/ev_character_format.xml</location>EV_CHARACTER_FORMAT</class><symbol>,</symbol> <class><include>False</include>STRING_8</class><symbol>]</symbol>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>

	<anchor>f_all_paragraph_formats</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_formats</location>all_paragraph_formats</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><location>../interface/ev_paragraph_format.xml</location>EV_PARAGRAPH_FORMAT</class><symbol>,</symbol> <class><include>False</include>STRING_8</class><symbol>]</symbol>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>

	<anchor>f_all_paragraph_format_keys</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_format_keys</location>all_paragraph_format_keys</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><include>False</include>STRING_8</class><symbol>]</symbol>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>

	<anchor>f_all_paragraph_indexes</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_all_paragraph_indexes</location>all_paragraph_indexes</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>]</symbol>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>

	<anchor>f_number_of_characters_opened</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_number_of_characters_opened</location>number_of_characters_opened</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>

	<anchor>f_current_depth</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_depth</location>current_depth</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Current depth of rtf parsing as determined by openeing &quot;{&quot; and</comment>
			<comment>--</comment><comment> closing &quot;}&quot;. Valid rtf opens as many as are closed.</comment>

	<anchor>f_process_fontname</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_process_fontname</location>process_fontname</feature> <symbol>(</symbol><local>rtf_text</local><symbol>:</symbol> <class><include>False</include>STRING_8</class><symbol>)</symbol>
			<comment>--</comment><comment> Process a font name found in RTF text </comment><quoted>rtf_text</quoted><comment> starting at position </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><comment>.</comment>
		<keyword>require</keyword>
			<tag>rtf_text_not_void</tag><symbol>:</symbol> <local>rtf_text</local> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>local</keyword>
			<local>text_completed</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<local>current_text</local><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<local>current_character</local><symbol>:</symbol> <class><include>False</include>CHARACTER_32</class>
		<keyword>do</keyword>
			<keyword>create</keyword> <local>current_text</local><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
			<keyword>from</keyword>
			<keyword>until</keyword>
				<local>text_completed</local>
			<keyword>loop</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_update_main_iterator</location>update_main_iterator</feature>
				<local>current_character</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_get_character</location>get_character</feature><symbol> </symbol><symbol>(</symbol><local>rtf_text</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>)</symbol>
				<keyword>if</keyword> <local>current_character</local> <symbol>/=</symbol> <char>'%N'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>and</keyword> <local>current_character</local> <symbol>/=</symbol> <char>'%R'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<keyword>if</keyword> <local>current_character</local> <symbol>=</symbol> <char>';'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>or</keyword> <local>current_character</local> <symbol>=</symbol> <char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
						<local>text_completed</local> <symbol>:=</symbol> <keyword>True</keyword>
					<keyword>end</keyword>
					<keyword>if</keyword> <keyword>not</keyword> <local>text_completed</local> <keyword>then</keyword>
						<local>current_text</local><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><local>current_character</local><symbol>)</symbol>
					<keyword>end</keyword>
				<keyword>end</keyword>
				<keyword>if</keyword> <keyword>not</keyword> <local>text_completed</local> <keyword>then</keyword>
					<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><symbol> </symbol><symbol>(</symbol><number>1</number><symbol>)</symbol>
				<keyword>else</keyword>
					<keyword>if</keyword> <local>current_character</local> <symbol>=</symbol> <char>';'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
					<keyword>elseif</keyword> <local>current_character</local> <symbol>=</symbol> <char>'}'</char><dot>.</dot><feature><include>False</include>to_character_32</feature> <keyword>then</keyword>
						<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature> <symbol>-</symbol> <number>1</number>
						<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>-</symbol> <number>1</number>
					<keyword>else</keyword>
						<keyword>check</keyword>
							<tag>unhandled_condition</tag><symbol>:</symbol> <keyword>False</keyword>
						<keyword>end</keyword>
					<keyword>end</keyword>
				<keyword>end</keyword>
			<keyword>end</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_last_fontname</location>last_fontname</feature> <symbol>:=</symbol> <local>current_text</local>
		<keyword>end</keyword>

	<anchor>f_current_format</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_format</location>current_format</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><location>../implementation_interface/rtf_format_i.xml</location>RTF_FORMAT_I</class>
			<comment>--</comment><comment> The current format retrieved from the RTF.</comment>

	<anchor>f_format_stack</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_stack</location>format_stack</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>ARRAYED_STACK</class> <symbol>[</symbol><class><location>../implementation_interface/rtf_format_i.xml</location>RTF_FORMAT_I</class><symbol>]</symbol>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>

	<anchor>f_main_iterator</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> The index currently iterated within the RTF file that is being loaded.</comment>
			<comment>--</comment><comment> This must be accessible to </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><comment>.</comment>

	<anchor>f_temp_iterator</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> A temporary value used by </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature><comment> to ensure that multiple calls to</comment>
			<comment>--</comment><comment> move forwards do not move backwards.</comment>

	<anchor>f_plain_text</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_plain_text</location>plain_text</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>STRING_32</class>
			<comment>--</comment><comment> A string representation of the contents of from the last</comment>
			<comment>--</comment><comment> RTF file loaded.</comment>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>

	<anchor>f_update_main_iterator</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_update_main_iterator</location>update_main_iterator</feature>
			<comment>--</comment><comment> Ensure </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><comment> takes the value of </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature><comment>.</comment>
		<keyword>do</keyword>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature>
		<keyword>ensure</keyword>
			<tag>main_iterator_set</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature>
		<keyword>end</keyword>

	<anchor>f_move_main_iterator</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_move_main_iterator</location>move_main_iterator</feature> <symbol>(</symbol><local>step</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Ensure </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature><comment> is moved </comment><quoted>step</quoted><comment> characters next time </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_update_main_iterator</location>update_main_iterator</feature><comment> is called.</comment>
			<comment>--</comment><comment> Each call will not move the iterator back to less than one of the previous calls</comment>
			<comment>--</comment><comment> as enforced by the value of </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature><comment>.</comment>
			<comment>--</comment><comment> i.e. calling `move_main_iterator three times with 5, 12, and 2 as arguments, ensures that</comment>
			<comment>--</comment><comment> next time </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_update_main_iterator</location>update_main_iterator</feature><comment> is called it will increase by 12.</comment>
		<keyword>require</keyword>
			<tag>step_positive</tag><symbol>:</symbol> <local>step</local> <symbol>&gt;</symbol> <number>0</number>
		<keyword>do</keyword>
			<keyword>if</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>+</symbol> <local>step</local> <symbol>&gt;</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_main_iterator</location>main_iterator</feature> <symbol>+</symbol> <local>step</local>
			<keyword>end</keyword>
		<keyword>ensure</keyword>
			<tag>temp_iterator_moved_forwards</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature> <symbol>&gt;=</symbol> <keyword>old</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_temp_iterator</location>temp_iterator</feature>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <symbol>{</symbol>NONE<symbol>}</symbol> <comment>--</comment><comment> Implementation</comment>

	<anchor>f_pixels_to_half_points</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_pixels_to_half_points</location>pixels_to_half_points</feature> <symbol>(</symbol><local>pixels</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> </comment><quoted>Result</quoted><comment> is pixels converted to half points, being</comment>
			<comment>--</comment><comment> the meaurement used for font sizes in RTF.</comment>
		<keyword>do</keyword>
			<keyword>Result</keyword> <symbol>:=</symbol> <symbol>(</symbol><local>pixels</local> <symbol>*</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_points_per_inch</location>Points_per_inch</feature> <symbol>*</symbol> <number>2</number><symbol>)</symbol> <symbol>//</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_screen</location>Screen</feature><dot>.</dot><feature><location>../interface/ev_screen.xml#f_vertical_resolution</location>vertical_resolution</feature>
		<keyword>end</keyword>

	<anchor>f_half_points_to_pixels</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_half_points_to_pixels</location>half_points_to_pixels</feature> <symbol>(</symbol><local>half_points</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class><symbol>)</symbol><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> </comment><quoted>Result</quoted><comment> is half points converted to pixels.</comment>
		<keyword>do</keyword>
			<keyword>Result</keyword> <symbol>:=</symbol> <local>half_points</local> <symbol>*</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_screen</location>Screen</feature><dot>.</dot><feature><location>../interface/ev_screen.xml#f_vertical_resolution</location>vertical_resolution</feature> <symbol>//</symbol> <symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_points_per_inch</location>Points_per_inch</feature> <symbol>*</symbol> <number>2</number><symbol>)</symbol>
		<keyword>end</keyword>

	<anchor>f_build_paragraph_from_format</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_build_paragraph_from_format</location>build_paragraph_from_format</feature> <symbol>(</symbol><local>a_format</local><symbol>:</symbol> <class><location>../interface/ev_paragraph_format.xml</location>EV_PARAGRAPH_FORMAT</class><symbol>)</symbol>
			<comment>--</comment><comment> Add RTF representation of </comment><quoted>a_format</quoted><comment> to </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature><comment> is</comment>
		<keyword>require</keyword>
			<tag>formats_not_void</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>local</keyword>
			<local>format</local><symbol>:</symbol> <class><include>False</include>STRING_32</class>
		<keyword>do</keyword>
			<keyword>create</keyword> <local>format</local><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>128</number><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_new_paragraph</location>Rtf_new_paragraph</feature><symbol>)</symbol>
			<keyword>if</keyword> <local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_is_left_aligned</location>is_left_aligned</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_left_aligned</location>Rtf_paragraph_left_aligned</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_is_center_aligned</location>is_center_aligned</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_center_aligned</location>Rtf_paragraph_center_aligned</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_is_right_aligned</location>is_right_aligned</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_right_aligned</location>Rtf_paragraph_right_aligned</feature><symbol>)</symbol>
			<keyword>elseif</keyword> <local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_is_justified</location>is_justified</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_justified</location>Rtf_paragraph_justified</feature><symbol>)</symbol>
			<keyword>end</keyword>
			<keyword>if</keyword> <local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_left_margin</location>left_margin</feature> <symbol>/=</symbol> <number>0</number> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_left_indent</location>Rtf_paragraph_left_indent</feature><symbol>)</symbol>
				<local>format</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_pixels_to_half_points</location>pixels_to_half_points</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_left_margin</location>left_margin</feature> <symbol>*</symbol> <number>10</number><symbol>)</symbol><symbol>)</symbol>
			<keyword>end</keyword>
			<keyword>if</keyword> <local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_right_margin</location>right_margin</feature> <symbol>/=</symbol> <number>0</number> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_right_indent</location>Rtf_paragraph_right_indent</feature><symbol>)</symbol>
				<local>format</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_pixels_to_half_points</location>pixels_to_half_points</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_right_margin</location>right_margin</feature> <symbol>*</symbol> <number>10</number><symbol>)</symbol><symbol>)</symbol>
			<keyword>end</keyword>
			<keyword>if</keyword> <local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_top_spacing</location>top_spacing</feature> <symbol>/=</symbol> <number>0</number> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_space_before</location>Rtf_paragraph_space_before</feature><symbol>)</symbol>
				<local>format</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_pixels_to_half_points</location>pixels_to_half_points</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_top_spacing</location>top_spacing</feature> <symbol>*</symbol> <number>10</number><symbol>)</symbol><symbol>)</symbol>
			<keyword>end</keyword>
			<keyword>if</keyword> <local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_bottom_spacing</location>bottom_spacing</feature> <symbol>/=</symbol> <number>0</number> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_paragraph_space_after</location>Rtf_paragraph_space_after</feature><symbol>)</symbol>
				<local>format</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_pixels_to_half_points</location>pixels_to_half_points</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><dot>.</dot><feature><location>../interface/ev_paragraph_format.xml#f_bottom_spacing</location>bottom_spacing</feature> <symbol>*</symbol> <number>10</number><symbol>)</symbol><symbol>)</symbol>
			<keyword>end</keyword>
			<local>format</local><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><char>' '</char><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
			<keyword>if</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature> <symbol>/=</symbol> <keyword>Void</keyword> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature><dot>.</dot><feature><include>False</include>extend</feature><symbol> </symbol><symbol>(</symbol><local>format</local><symbol>)</symbol>
			<keyword>end</keyword>
		<keyword>ensure</keyword>
			<tag>formats_count_increased</tag><symbol>:</symbol> <keyword>attached</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature> <keyword>and then</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature><dot>.</dot><feature><include>False</include>count</feature> <symbol>=</symbol> <keyword>old</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature><dot>.</dot><feature><include>False</include>count</feature> <symbol>+</symbol> <number>1</number>
		<keyword>end</keyword>

	<anchor>f_build_font_from_format</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_build_font_from_format</location>build_font_from_format</feature> <symbol>(</symbol><local>a_format</local><symbol>:</symbol> <class><location>../implementation_interface/ev_character_format_i.xml</location>EV_CHARACTER_FORMAT_I</class><symbol>)</symbol>
			<comment>--</comment><comment> Update font text </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature><comment> for addition of a new format to the buffering.</comment>
		<keyword>local</keyword>
			<local>current_family</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>family</local><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<local>temp_string</local><symbol>:</symbol> <class><include>False</include>STRING_32</class>
		<keyword>do</keyword>
			<local>current_family</local> <symbol>:=</symbol> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_family</location>family</feature>
			<keyword>inspect</keyword> <local>current_family</local>
			<keyword>when</keyword> <feature><location>../interface/ev_font_constants.xml#f_family_screen</location>Family_screen</feature> <keyword>then</keyword>
				<local>family</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_tech</location>Rtf_family_tech</feature>
			<keyword>when</keyword> <feature><location>../interface/ev_font_constants.xml#f_family_roman</location>Family_roman</feature> <keyword>then</keyword>
				<local>family</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_roman</location>Rtf_family_roman</feature>
			<keyword>when</keyword> <feature><location>../interface/ev_font_constants.xml#f_family_sans</location>Family_sans</feature> <keyword>then</keyword>
				<local>family</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_swiss</location>Rtf_family_swiss</feature>
			<keyword>when</keyword> <feature><location>../interface/ev_font_constants.xml#f_family_typewriter</location>Family_typewriter</feature> <keyword>then</keyword>
				<local>family</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_script</location>Rtf_family_script</feature>
			<keyword>when</keyword> <feature><location>../interface/ev_font_constants.xml#f_family_modern</location>Family_modern</feature> <keyword>then</keyword>
				<local>family</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_modern</location>Rtf_family_modern</feature>
			<keyword>else</keyword>
				<local>family</local> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_family_nill</location>Rtf_family_nill</feature>
			<keyword>end</keyword>
			<keyword>create</keyword> <local>temp_string</local><dot>.</dot><feature><include>False</include>make</feature><symbol> </symbol><symbol>(</symbol><number>50</number><symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><char>'\'</char><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><local>family</local><symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;\fcharset&quot;<symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_char_set</location>char_set</feature><symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_space_string</location>Space_string</feature><symbol>)</symbol>
			<local>temp_string</local><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_name</location>name</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_fonts</location>hashed_fonts</feature><dot>.</dot><feature><include>False</include>search</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>)</symbol>
			<keyword>if</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_fonts</location>hashed_fonts</feature><dot>.</dot><feature><include>False</include>found</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_count</location>font_count</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_count</location>font_count</feature> <symbol>+</symbol> <number>1</number>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_fonts</location>hashed_fonts</feature><dot>.</dot><feature><include>False</include>put</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_count</location>font_count</feature><symbol>,</symbol> <local>temp_string</local><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_offset</location>font_offset</feature><dot>.</dot><feature><include>False</include>force</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_fonts</location>hashed_fonts</feature><dot>.</dot><feature><include>False</include>found_item</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature><dot>.</dot><feature><include>False</include>append_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;{\f&quot;<symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_count</location>font_count</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature><dot>.</dot><feature><include>False</include>append_string_general</feature><symbol> </symbol><symbol>(</symbol>&quot;;}&quot;<symbol>)</symbol>
			<keyword>else</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_offset</location>font_offset</feature><dot>.</dot><feature><include>False</include>force</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_fonts</location>hashed_fonts</feature><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>temp_string</local><symbol>)</symbol><symbol>)</symbol>
			<keyword>end</keyword>
		<keyword>end</keyword>

	<anchor>f_build_color_from_format</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_build_color_from_format</location>build_color_from_format</feature> <symbol>(</symbol><local>a_format</local><symbol>:</symbol> <class><location>../implementation_interface/ev_character_format_i.xml</location>EV_CHARACTER_FORMAT_I</class><symbol>)</symbol>
			<comment>--</comment><comment> Update color text </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_text</location>color_text</feature><comment> for addition of a new format to the buffering.</comment>
		<keyword>local</keyword>
			<local>l_color</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<local>hashed_color</local><symbol>,</symbol> <local>hashed_back_color</local><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<local>red</local><symbol>,</symbol> <local>green</local><symbol>,</symbol> <local>blue</local><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
		<keyword>do</keyword>
			<local>l_color</local> <symbol>:=</symbol> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_fcolor</location>fcolor</feature>
			<keyword>create</keyword> <local>hashed_color</local><dot>.</dot><feature><include>False</include>make_empty</feature>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>hashed_color</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_red</location>Rtf_red</feature><symbol>)</symbol>
			<local>red</local> <symbol>:=</symbol> <local>l_color</local> <symbol>&amp;</symbol> <number>255</number>
			<local>l_color</local> <symbol>:=</symbol> <local>l_color</local> <symbol>|&gt;&gt;</symbol> <number>8</number>
			<local>green</local> <symbol>:=</symbol> <local>l_color</local> <symbol>&amp;</symbol> <number>255</number>
			<local>l_color</local> <symbol>:=</symbol> <local>l_color</local> <symbol>|&gt;&gt;</symbol> <number>8</number>
			<local>blue</local> <symbol>:=</symbol> <local>l_color</local> <symbol>&amp;</symbol> <number>255</number>
			<local>hashed_color</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><local>red</local><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>hashed_color</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_green</location>Rtf_green</feature><symbol>)</symbol>
			<local>hashed_color</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><local>green</local><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>hashed_color</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_blue</location>Rtf_blue</feature><symbol>)</symbol>
			<local>hashed_color</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><local>blue</local><symbol>)</symbol>
			<local>hashed_color</local><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><char>';'</char><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>search</feature><symbol> </symbol><symbol>(</symbol><local>hashed_color</local><symbol>)</symbol>
			<keyword>if</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>found</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_count</location>color_count</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_count</location>color_count</feature> <symbol>+</symbol> <number>1</number>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>put</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_count</location>color_count</feature><symbol>,</symbol> <local>hashed_color</local><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_offset</location>color_offset</feature><dot>.</dot><feature><include>False</include>force</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>found_item</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_text</location>color_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><local>hashed_color</local><symbol>)</symbol>
			<keyword>else</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_offset</location>color_offset</feature><dot>.</dot><feature><include>False</include>force</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>hashed_color</local><symbol>)</symbol><symbol>)</symbol>
			<keyword>end</keyword>
			<local>l_color</local> <symbol>:=</symbol> <local>a_format</local><dot>.</dot><feature><location>../implementation_interface/ev_character_format_i.xml#f_bcolor</location>bcolor</feature>
			<keyword>create</keyword> <local>hashed_back_color</local><dot>.</dot><feature><include>False</include>make_empty</feature>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>hashed_back_color</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_red</location>Rtf_red</feature><symbol>)</symbol>
			<local>red</local> <symbol>:=</symbol> <local>l_color</local> <symbol>&amp;</symbol> <number>255</number>
			<local>l_color</local> <symbol>:=</symbol> <local>l_color</local> <symbol>|&gt;&gt;</symbol> <number>8</number>
			<local>green</local> <symbol>:=</symbol> <local>l_color</local> <symbol>&amp;</symbol> <number>255</number>
			<local>l_color</local> <symbol>:=</symbol> <local>l_color</local> <symbol>|&gt;&gt;</symbol> <number>8</number>
			<local>blue</local> <symbol>:=</symbol> <local>l_color</local> <symbol>&amp;</symbol> <number>255</number>
			<local>hashed_back_color</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><local>red</local><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>hashed_back_color</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_green</location>Rtf_green</feature><symbol>)</symbol>
			<local>hashed_back_color</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><local>green</local><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature><symbol> </symbol><symbol>(</symbol><local>hashed_back_color</local><symbol>,</symbol> <feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_blue</location>Rtf_blue</feature><symbol>)</symbol>
			<local>hashed_back_color</local><dot>.</dot><feature><include>False</include>append_integer</feature><symbol> </symbol><symbol>(</symbol><local>blue</local><symbol>)</symbol>
			<local>hashed_back_color</local><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><char>';'</char><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
			<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>search</feature><symbol> </symbol><symbol>(</symbol><local>hashed_back_color</local><symbol>)</symbol>
			<keyword>if</keyword> <keyword>not</keyword> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>found</feature> <keyword>then</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_count</location>color_count</feature> <symbol>:=</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_count</location>color_count</feature> <symbol>+</symbol> <number>1</number>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>put</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_count</location>color_count</feature><symbol>,</symbol> <local>hashed_back_color</local><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_back_color_offset</location>back_color_offset</feature><dot>.</dot><feature><include>False</include>force</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>found_item</feature><symbol>)</symbol>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_text</location>color_text</feature><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><local>hashed_back_color</local><symbol>)</symbol>
			<keyword>else</keyword>
				<feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_back_color_offset</location>back_color_offset</feature><dot>.</dot><feature><include>False</include>force</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><dot>.</dot><feature><include>False</include>item</feature><symbol> </symbol><symbol>(</symbol><local>hashed_back_color</local><symbol>)</symbol><symbol>)</symbol>
			<keyword>end</keyword>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <symbol>{</symbol>NONE<symbol>}</symbol> <comment>--</comment><comment> Implementation</comment>

	<anchor>f_add_rtf_keyword</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_add_rtf_keyword</location>add_rtf_keyword</feature> <symbol>(</symbol><local>a_string</local><symbol>,</symbol> <local>a_keyword</local><symbol>:</symbol> <class><include>False</include>STRING_32</class><symbol>)</symbol>
			<comment>--</comment><comment> Add rtf representation of </comment><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_control_character</location>Rtf_control_character</feature><comment> and keyword </comment><quoted>a_keyword</quoted><comment> to </comment><quoted>a_string</quoted><comment>.</comment>
		<keyword>require</keyword>
			<tag>string_not_void</tag><symbol>:</symbol> <local>a_string</local> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>keyword_not_void</tag><symbol>:</symbol> <local>a_keyword</local> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>do</keyword>
			<local>a_string</local><dot>.</dot><feature><include>False</include>append_character</feature><symbol> </symbol><symbol>(</symbol><feature><location>../implementation_interface/ev_rich_text_constants_i.xml#f_rtf_control_character</location>Rtf_control_character</feature><dot>.</dot><feature><include>False</include>to_character_32</feature><symbol>)</symbol>
			<local>a_string</local><dot>.</dot><feature><include>False</include>append</feature><symbol> </symbol><symbol>(</symbol><local>a_keyword</local><symbol>)</symbol>
		<keyword>ensure</keyword>
			<tag>count_increased</tag><symbol>:</symbol> <keyword>old</keyword> <local>a_string</local><dot>.</dot><feature><include>False</include>count</feature> <symbol>+</symbol> <local>a_keyword</local><dot>.</dot><feature><include>False</include>count</feature> <symbol>+</symbol> <number>1</number> <symbol>=</symbol> <local>a_string</local><dot>.</dot><feature><include>False</include>count</feature>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <symbol>{</symbol><class><location>../implementation_interface/ev_any_i.xml</location>EV_ANY_I</class><symbol>}</symbol> <comment>--</comment><comment> Implementation</comment>

	<anchor>f_paragraph_start_indexes</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_start_indexes</location>paragraph_start_indexes</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>]</symbol>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>

	<anchor>f_paragraph_formats</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_paragraph_formats</location>paragraph_formats</feature><symbol>:</symbol> <keyword>detachable</keyword> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><include>False</include>STRING_32</class><symbol>]</symbol>
		<keyword>note</keyword>
			option: stable
		<keyword>attribute</keyword>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <symbol>{</symbol>NONE<symbol>}</symbol> <comment>--</comment><comment> Implementation</comment>

	<anchor>f_default_structure_size</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_structure_size</location>Default_structure_size</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class> <symbol>=</symbol> <number>20</number>
			<comment>--</comment><comment> Default size used to initalize all buffering structures.</comment>

	<anchor>f_default_string_size</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_default_string_size</location>Default_string_size</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class> <symbol>=</symbol> <number>50000</number>
			<comment>--</comment><comment> Default size used for all internal strings for buffering.</comment>
			<comment>--</comment><comment> This reduces the need to resize the string as the formatting is applied.</comment>
			<comment>--</comment><comment> Resizing strings can be slow, so is to be avoided wherever possible.</comment>
			<comment>--</comment><comment> </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_formats</location>hashed_formats</feature><comment>, </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_offsets</location>format_offsets</feature><comment> and </comment><quoted>color_offsets</quoted><comment> are only used in the</comment>
			<comment>--</comment><comment> buffered append operations, while the other lists and hash tables are used</comment>
			<comment>--</comment><comment> in the buffered formatting operations.</comment>

	<anchor>f_hashed_formats</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_formats</location>hashed_formats</feature><symbol>:</symbol> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><location>../interface/ev_character_format.xml</location>EV_CHARACTER_FORMAT</class><symbol>,</symbol> <class><include>False</include>STRING_8</class><symbol>]</symbol>
			<comment>--</comment><comment> A list of all character formats to be applied to buffering, accessible</comment>
			<comment>--</comment><comment> through </comment><quoted>hash_value</quoted><comment> of EV_CHARACTER_FORMAT. This ensures that repeated formats</comment>
			<comment>--</comment><comment> are not stored multiple times.</comment>

	<anchor>f_format_offsets</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_format_offsets</location>format_offsets</feature><symbol>:</symbol> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>,</symbol> <class><include>False</include>STRING_8</class><symbol>]</symbol>
			<comment>--</comment><comment> The index of each format in </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_formats</location>hashed_formats</feature><comment> within the RTF document that must be generated.</comment>
			<comment>--</comment><comment> For each set of formatting that must be applied, a reference to the format in the document</comment>
			<comment>--</comment><comment> must be specified, and this table holds the appropriate offset of that formatting.</comment>

	<anchor>f_buffered_text</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_buffered_text</location>buffered_text</feature><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<comment>--</comment><comment> Internal representation of </comment><quoted>text</quoted><comment> used only when flushing the buffers. Prevents the need</comment>
			<comment>--</comment><comment> to stream the contents of </comment><quoted>current</quoted><comment>, every time that the </comment><quoted>text</quoted><comment> is needed.</comment>

	<anchor>f_lowest_buffered_value</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_lowest_buffered_value</location>lowest_buffered_value</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Used when applying a buffered format, these values represent the lowest and highest character indexes</comment>
			<comment>--</comment><comment> that have been buffered. This allows implementations to only stream between these indexes if possible.</comment>

	<anchor>f_highest_buffered_value</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_highest_buffered_value</location>highest_buffered_value</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Used when applying a buffered format, these values represent the lowest and highest character indexes</comment>
			<comment>--</comment><comment> that have been buffered. This allows implementations to only stream between these indexes if possible.</comment>

	<anchor>f_formats</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_formats</location>formats</feature><symbol>:</symbol> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><location>../interface/ev_character_format.xml</location>EV_CHARACTER_FORMAT</class><symbol>]</symbol>
			<comment>--</comment><comment> All character formats used in </comment><quoted>Current</quoted><comment>.</comment>

	<anchor>f_heights</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_heights</location>heights</feature><symbol>:</symbol> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>]</symbol>
			<comment>--</comment><comment> All heights of formats used in </comment><quoted>Current</quoted><comment>, corresponding to contents of </comment><quoted>forrmats</quoted><comment>.</comment>

	<anchor>f_formats_index</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_formats_index</location>formats_index</feature><symbol>:</symbol> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>,</symbol> <class><include>False</include>INTEGER_32</class><symbol>]</symbol>
			<comment>--</comment><comment> The index of each format relative to a paticular character index. This permits the correct</comment>
			<comment>--</comment><comment> format to be looked up when the start positions of the formats are traversed.</comment>

	<anchor>f_start_formats</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_start_formats</location>start_formats</feature><symbol>:</symbol> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><include>False</include>STRING_8</class><symbol>,</symbol> <class><include>False</include>INTEGER_32</class><symbol>]</symbol>
			<comment>--</comment><comment> The format type applicable at a paticular character position. The </comment><quoted>item</quoted><comment> is used to look up the</comment>
			<comment>--</comment><comment> character format from </comment><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_formats</location>hashed_formats</feature><comment>.</comment>

	<anchor>f_end_formats</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_end_formats</location>end_formats</feature><symbol>:</symbol> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><include>False</include>STRING_8</class><symbol>,</symbol> <class><include>False</include>INTEGER_32</class><symbol>]</symbol>
			<comment>--</comment><comment> The format type applicable at a paticular character position. The integer represents the index of the</comment>
			<comment>--</comment><comment> closing caret index.</comment>
			<comment>--</comment><comment> These attributes are used to stop multiple versions of the same color being</comment>
			<comment>--</comment><comment> generated in the RTF.</comment>

	<anchor>f_hashed_colors</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_colors</location>hashed_colors</feature><symbol>:</symbol> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>,</symbol> <class><include>False</include>STRING_32</class><symbol>]</symbol>
			<comment>--</comment><comment> All colors currently stored for buffering, accessible via the</comment>
			<comment>--</comment><comment> actual RTF output, in the form &quot;;\red255\green0\blue0&quot;. The integer </comment><quoted>item</quoted>
			<comment>--</comment><comment> corresponds to the offset of the color in </comment><quoted>colors</quoted><comment>.</comment>

	<anchor>f_color_offset</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_offset</location>color_offset</feature><symbol>:</symbol> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>]</symbol>
			<comment>--</comment><comment> All color indexes to use for foreground colors in document,</comment>
			<comment>--</comment><comment> indexed by their corresponding character format index.</comment>
			<comment>--</comment><comment> So, for example, item 20 would correspond to the color offset to use from</comment>
			<comment>--</comment><comment> the color table for the 20th character format.</comment>

	<anchor>f_back_color_offset</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_back_color_offset</location>back_color_offset</feature><symbol>:</symbol> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>]</symbol>
			<comment>--</comment><comment> All color indexes to use for background colors in document,</comment>
			<comment>--</comment><comment> indexed by their corresponding character format index.</comment>
			<comment>--</comment><comment> So, for example, item 20 would correspond to the color offset to use from</comment>
			<comment>--</comment><comment> the color table for the 20th character format.</comment>

	<anchor>f_color_count</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_count</location>color_count</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Number of colors currently buffered.		</comment>

	<anchor>f_color_text</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_color_text</location>color_text</feature><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<comment>--</comment><comment> The RTF string correponding to all colors in the document.</comment>
			<comment>--</comment><comment> These attributes are used to stop multiple versions of the same font being</comment>
			<comment>--</comment><comment> generate in the RTF.</comment>

	<anchor>f_hashed_fonts</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_hashed_fonts</location>hashed_fonts</feature><symbol>:</symbol> <class><include>False</include>HASH_TABLE</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>,</symbol> <class><include>False</include>STRING_32</class><symbol>]</symbol>
			<comment>--</comment><comment> All fonts currently stored for buffering, accessible via the</comment>
			<comment>--</comment><comment> actual RTF output, in the form &quot;\froman\fcharset0 System&quot;. The integer </comment><quoted>item</quoted>
			<comment>--</comment><comment> corresponds to the offset of the font in </comment><quoted>fonts</quoted><comment>.</comment>

	<anchor>f_font_offset</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_offset</location>font_offset</feature><symbol>:</symbol> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><include>False</include>INTEGER_32</class><symbol>]</symbol>
			<comment>--</comment><comment> All font indexes  in document,</comment>
			<comment>--</comment><comment> indexed by their corresponding character format index.</comment>
			<comment>--</comment><comment> So, for example, item 20 would correspond to the font offset to use from</comment>
			<comment>--</comment><comment> the font table for the 20th character format.</comment>

	<anchor>f_font_count</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_count</location>font_count</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Number of fonts currently buffered.</comment>

	<anchor>f_font_text</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_font_text</location>font_text</feature><symbol>:</symbol> <class><include>False</include>STRING_32</class>
			<comment>--</comment><comment> The RTF string corresponding to all fonts in the document.</comment>

	<anchor>f_is_current_format_underlined</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_underlined</location>is_current_format_underlined</feature><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>

	<anchor>f_is_current_format_striked_through</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_striked_through</location>is_current_format_striked_through</feature><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>

	<anchor>f_is_current_format_bold</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_bold</location>is_current_format_bold</feature><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>

	<anchor>f_is_current_format_italic</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_is_current_format_italic</location>is_current_format_italic</feature><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>

	<anchor>f_current_vertical_offset</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_current_vertical_offset</location>current_vertical_offset</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class>
			<comment>--</comment><comment> Booleans used to determine current formatting. These are used to prevent</comment>
			<comment>--</comment><comment> repeatedly opening the same tags each time a new format is encountered.</comment>

	<anchor>f_screen</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_screen</location>Screen</feature><symbol>:</symbol> <class><location>../interface/ev_screen.xml</location>EV_SCREEN</class>
			<comment>--</comment><comment> Once acces to EV_SCREEN object.</comment>
		<keyword>once</keyword>
			<keyword>create</keyword> <keyword>Result</keyword>
		<keyword>end</keyword>

	<anchor>f_points_per_inch</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_points_per_inch</location>Points_per_inch</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class> <symbol>=</symbol> <number>72</number>
			<comment>--</comment><comment> Number of points per inch.</comment>

	<anchor>f_initial_color_value</anchor><feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_initial_color_value</location>Initial_color_value</feature><symbol>:</symbol> <class><include>False</include>INTEGER_32</class> <symbol>=</symbol> <number>-1</number>
			<comment>--</comment><comment> Value assigned to each color RGB component before loading.</comment>
			<comment>--</comment><comment> This permits us to determine if the first color is auto, as if</comment>
			<comment>--</comment><comment> so, the rgb values are all still set to this value.</comment>
	
<keyword>invariant</keyword>
	<tag>rich_text_not_void</tag><symbol>:</symbol> <feature><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml#f_rich_text</location>rich_text</feature> <symbol>/=</symbol> <keyword>Void</keyword>

<keyword>note</keyword>
	<indexing_tag>copyright</indexing_tag><symbol>:</symbol> <string>&quot;Copyright (c) 1984-2013, Eiffel Software and others&quot;</string>
	<indexing_tag>license</indexing_tag><symbol>:</symbol> <string>&quot;Eiffel Forum License v2 (see </string><string><location>http://www.eiffel.com/licensing/forum.txt</location>http://www.eiffel.com/licensing/forum.txt</string><string>)&quot;</string>
	<indexing_tag>source</indexing_tag><symbol>:</symbol> <string>&quot;</string><string>[</string>
		<string>Eiffel Software</string>
		<string>5949 Hollister Ave., Goleta, CA 93117 USA</string>
		<string>Telephone 805-685-1006, Fax 805-685-6869</string>
		<string>Website </string><string><location>http://www.eiffel.com</location>http://www.eiffel.com</string>
		<string>Customer support </string><string><location>http://support.eiffel.com</location>http://support.eiffel.com</string>
	<string>]</string><string>&quot;</string>

<keyword>end</keyword> <comment>--</comment> <comment>class </comment><class><location>../implementation_interface/ev_rich_text_buffering_structures_i.xml</location>EV_RICH_TEXT_BUFFERING_STRUCTURES_I</class></system>

