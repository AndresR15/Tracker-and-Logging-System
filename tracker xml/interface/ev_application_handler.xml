<system>
<keyword>note</keyword>
	<indexing_tag>description</indexing_tag><symbol>:</symbol> <string>&quot;</string><string>[</string>
		<string>		Before SCOOP appeared, the event loop of a graphical application would run in the main thread</string>
		<string>		after creating the initial graphical objects. That thread would enter an event loop to process</string>
		<string>		new events. That thread was also called the GUI thread.</string>
		<string>		</string>
		<string>		In SCOOP mode this doesn't work because a processor stuck in a loop cannot process any logged</string>
		<string>		calls. In other words, it means that you cannot perform calls on a separate widget </string><string>my_widget</string>
		<string>		as they will be logged but only applied after the processor has completed its event loop and</string>
		<string>		exited its current application of a call.</string>
		
		<string>		To circumvent this, we require the following guidelines. A GUI processor is created, this is</string>
		<string>		where the EV_APPLICATION object and all GUI objects are created. The GUI processor is similar</string>
		<string>		to the GUI thread in non-SCOOP mode. However we require the GUI processor to not do anything</string>
		<string>		else after calling </string><symbol>{</symbol><class><location>../interface/ev_application.xml</location>EV_APPLICATION</class><symbol>}</symbol><dot>.</dot><feature><location>../interface/ev_application.xml#f_launch</location>launch</feature><string> so that it enters the idle mode of SCOOP processors.</string>
		
		<string>		Internally when calling </string><feature><location>../interface/ev_application_handler.xml#f_launch</location>launch</feature><string> from the EV_APPLICATION instance, we will create a separate</string>
		<string>		instance of EV_APPLICATION_HANDLER which will continuously log calls to process events on the</string>
		<string>		GUI processor. Since the GUI processor is idle, it will be able to log and apply calls coming</string>
		<string>		from any other separate processors that wants to interact with the GUI.</string>
	<string>]</string><string>&quot;</string>
	<indexing_tag>date</indexing_tag><symbol>:</symbol> <string>&quot;$Date: 2015-06-25 15:41:43 -0700 (Thu, 25 Jun 2015) $&quot;</string>
	<indexing_tag>revision</indexing_tag><symbol>:</symbol> <string>&quot;$Revision: 97568 $&quot;</string>

<keyword>frozen</keyword> <keyword>class</keyword> 
	<class><location>../interface/ev_application_handler.xml</location>EV_APPLICATION_HANDLER</class>

<keyword>inherit</keyword>
	<class><location>../interface/ev_any_handler.xml</location>EV_ANY_HANDLER</class>

<keyword>create</keyword> <symbol>{</symbol><class><location>../interface/ev_application.xml</location>EV_APPLICATION</class><symbol>}</symbol>
	<feature><location>../interface/ev_application_handler.xml#f_make</location>make</feature>

<keyword>feature</keyword> <symbol>{</symbol>NONE<symbol>}</symbol> <comment>--</comment><comment> Initialization</comment>

	<anchor>f_make</anchor><feature><location>../interface/ev_application_handler.xml#f_make</location>make</feature> <symbol>(</symbol><local>an_app</local><symbol>:</symbol> <keyword>separate</keyword> <class><location>../interface/ev_application.xml</location>EV_APPLICATION</class><symbol>)</symbol>
			<comment>--</comment><comment> Initialize Current with </comment><quoted>an_app</quoted><comment>.</comment>
		<keyword>do</keyword>
			<feature><location>../interface/ev_application_handler.xml#f_application_i</location>application_i</feature> <symbol>:=</symbol> <local>an_app</local><dot>.</dot><feature><location>../interface/ev_application.xml#f_implementation</location>implementation</feature>
		<keyword>ensure</keyword>
			<tag>application_i_set</tag><symbol>:</symbol> <feature><location>../interface/ev_application_handler.xml#f_application_i</location>application_i</feature> <symbol>=</symbol> <local>an_app</local><dot>.</dot><feature><location>../interface/ev_application.xml#f_implementation</location>implementation</feature>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <symbol>{</symbol><class><location>../interface/ev_application.xml</location>EV_APPLICATION</class><symbol>}</symbol> 

	<anchor>f_launch</anchor><feature><location>../interface/ev_application_handler.xml#f_launch</location>launch</feature>
			<comment>--</comment><comment> Execute event loop on </comment><feature><location>../interface/ev_application_handler.xml#f_application_i</location>application_i</feature><comment>.</comment>
		<keyword>local</keyword>
			<local>l_application_i</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../interface/ev_application_handler.xml#f_application_i</location>application_i</feature>
		<keyword>do</keyword>
			<keyword>from</keyword>
				<local>l_application_i</local> <symbol>:=</symbol> <feature><location>../interface/ev_application_handler.xml#f_application_i</location>application_i</feature>
			<keyword>until</keyword>
				<feature><location>../interface/ev_application_handler.xml#f_is_application_destroyed</location>is_application_destroyed</feature><symbol> </symbol><symbol>(</symbol><local>l_application_i</local><symbol>)</symbol>
			<keyword>loop</keyword>
				<feature><location>../interface/ev_application_handler.xml#f_process_application_event_queue</location>process_application_event_queue</feature><symbol> </symbol><symbol>(</symbol><local>l_application_i</local><symbol>)</symbol>
			<keyword>end</keyword>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <symbol>{</symbol>NONE<symbol>}</symbol> <comment>--</comment><comment> SCOOP handling.</comment>

	<anchor>f_process_application_event_queue</anchor><feature><location>../interface/ev_application_handler.xml#f_process_application_event_queue</location>process_application_event_queue</feature> <symbol>(</symbol><local>a_app_i</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../interface/ev_application_handler.xml#f_application_i</location>application_i</feature><symbol>)</symbol>
			<comment>--</comment><comment> Run a single event iteration on </comment><quoted>a_app</quoted><comment>.</comment>
		<keyword>do</keyword>
			<local>a_app_i</local><dot>.</dot><feature><location>../implementation_interface/ev_application_i.xml#f_process_event_queue</location>process_event_queue</feature><symbol> </symbol><symbol>(</symbol><keyword>True</keyword><symbol>)</symbol>
		<keyword>end</keyword>

	<anchor>f_is_application_destroyed</anchor><feature><location>../interface/ev_application_handler.xml#f_is_application_destroyed</location>is_application_destroyed</feature> <symbol>(</symbol><local>a_app_i</local><symbol>:</symbol> <keyword>like</keyword> <feature><location>../interface/ev_application_handler.xml#f_application_i</location>application_i</feature><symbol>)</symbol><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<comment>--</comment><comment> Has </comment><quoted>a_app</quoted><comment> been destroyed?</comment>
		<keyword>do</keyword>
			<keyword>Result</keyword> <symbol>:=</symbol> <local>a_app_i</local><dot>.</dot><feature><location>../implementation_interface/ev_any_i.xml#f_is_destroyed</location>is_destroyed</feature>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <symbol>{</symbol>NONE<symbol>}</symbol> <comment>--</comment><comment> Access</comment>

	<anchor>f_application_i</anchor><feature><location>../interface/ev_application_handler.xml#f_application_i</location>application_i</feature><symbol>:</symbol> <keyword>separate</keyword> <class><location>../implementation_interface/ev_application_i.xml</location>EV_APPLICATION_I</class>
			<comment>--</comment><comment> Application implementation object from which to propagate event loop.</comment>
	
<keyword>note</keyword>
	<indexing_tag>copyright</indexing_tag><symbol>:</symbol> <string>&quot;Copyright (c) 1984-2015, Eiffel Software and others&quot;</string>
	<indexing_tag>license</indexing_tag><symbol>:</symbol> <string>&quot;Eiffel Forum License v2 (see </string><string><location>http://www.eiffel.com/licensing/forum.txt</location>http://www.eiffel.com/licensing/forum.txt</string><string>)&quot;</string>
	<indexing_tag>source</indexing_tag><symbol>:</symbol> <string>&quot;</string><string>[</string>
		<string>Eiffel Software</string>
		<string>5949 Hollister Ave., Goleta, CA 93117 USA</string>
		<string>Telephone 805-685-1006, Fax 805-685-6869</string>
		<string>Website </string><string><location>http://www.eiffel.com</location>http://www.eiffel.com</string>
		<string>Customer support </string><string><location>http://support.eiffel.com</location>http://support.eiffel.com</string>
	<string>]</string><string>&quot;</string>

<keyword>end</keyword> <comment>--</comment> <comment>class </comment><class><location>../interface/ev_application_handler.xml</location>EV_APPLICATION_HANDLER</class></system>

