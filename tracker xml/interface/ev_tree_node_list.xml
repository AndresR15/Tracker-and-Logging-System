<system>
<keyword>note</keyword>
	<indexing_tag>description</indexing_tag><symbol>:</symbol> <string>&quot;Base class for EV_TREE and EV_TREE_ITEM.&quot;</string>
	<indexing_tag>legal</indexing_tag><symbol>:</symbol> <string>&quot;See notice at end of class.&quot;</string>
	<indexing_tag>status</indexing_tag><symbol>:</symbol> <string>&quot;See notice at end of class.&quot;</string>
	<indexing_tag>date</indexing_tag><symbol>:</symbol> <string>&quot;$Date: 2017-05-03 08:56:14 -0700 (Wed, 03 May 2017) $&quot;</string>
	<indexing_tag>revision</indexing_tag><symbol>:</symbol> <string>&quot;$Revision: 100317 $&quot;</string>

<keyword>deferred</keyword> <keyword>class</keyword> 
	<class><location>../interface/ev_tree_node_list.xml</location>EV_TREE_NODE_LIST</class>

<keyword>inherit</keyword>
	<class><location>../interface/ev_item_list.xml</location>EV_ITEM_LIST</class> <symbol>[</symbol><class><location>../interface/ev_tree_node.xml</location>EV_TREE_NODE</class><symbol>]</symbol>
		<keyword>redefine</keyword>
			<feature><location>../interface/ev_tree_node_list.xml#f_implementation</location>implementation</feature>
		<keyword>end</keyword>

<keyword>feature</keyword> <comment>--</comment><comment> Access</comment>

	<anchor>f_find_item_recursively_by_data</anchor><feature><location>../interface/ev_tree_node_list.xml#f_find_item_recursively_by_data</location>find_item_recursively_by_data</feature> <symbol>(</symbol><local>some_data</local><symbol>:</symbol> <class><include>False</include>ANY</class><symbol>)</symbol><symbol>:</symbol> <keyword>detachable</keyword> <class><location>../interface/ev_tree_node.xml</location>EV_TREE_NODE</class>
		<keyword>obsolete</keyword> &quot;Use `retrieve_item_recursively_by_data' instead. [2017-05-31]&quot;
			<comment>--</comment><comment> If </comment><feature><location>../interface/ev_any.xml#f_data</location>data</feature><comment> contained in a tree item at any level then</comment>
			<comment>--</comment><comment> assign this item to </comment><quoted>Result</quoted><comment>.</comment>
		<keyword>do</keyword>
			<keyword>Result</keyword> <symbol>:=</symbol> <feature><location>../interface/ev_tree_node_list.xml#f_implementation</location>implementation</feature><dot>.</dot><feature><location>../implementation_interface/ev_tree_node_list_i.xml#f_find_item_recursively_by_data</location>find_item_recursively_by_data</feature><symbol> </symbol><symbol>(</symbol><local>some_data</local><symbol>)</symbol>
		<keyword>ensure</keyword>
			<tag>not_found_in_empty</tag><symbol>:</symbol> <keyword>Result</keyword> <symbol>/=</symbol> <keyword>Void</keyword> <keyword>implies</keyword> <keyword>not</keyword> <feature><include>False</include>is_empty</feature>
			<tag>index_not_changed</tag><symbol>:</symbol> <keyword>old</keyword> <feature><location>../interface/ev_dynamic_list.xml#f_index</location>index</feature> <symbol>=</symbol> <feature><location>../interface/ev_dynamic_list.xml#f_index</location>index</feature>
		<keyword>end</keyword>

	<anchor>f_retrieve_item_recursively_by_data</anchor><feature><location>../interface/ev_tree_node_list.xml#f_retrieve_item_recursively_by_data</location>retrieve_item_recursively_by_data</feature> <symbol>(</symbol><local>some_data</local><symbol>:</symbol> <class><include>False</include>ANY</class><symbol>;</symbol> <local>should_compare_objects</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class><symbol>)</symbol><symbol>:</symbol> <keyword>detachable</keyword> <class><location>../interface/ev_tree_node.xml</location>EV_TREE_NODE</class>
			<comment>--</comment><comment> If </comment><feature><location>../interface/ev_any.xml#f_data</location>data</feature><comment> contained in a tree item at any level then</comment>
			<comment>--</comment><comment> assign this item to </comment><quoted>Result</quoted><comment>. Compare objects if</comment>
			<comment>--</comment><comment> </comment><quoted>should_compare_objects</quoted><comment> otherwise compare references.</comment>
		<keyword>do</keyword>
			<keyword>Result</keyword> <symbol>:=</symbol> <feature><location>../interface/ev_tree_node_list.xml#f_implementation</location>implementation</feature><dot>.</dot><feature><location>../implementation_interface/ev_tree_node_list_i.xml#f_retrieve_item_recursively_by_data</location>retrieve_item_recursively_by_data</feature><symbol> </symbol><symbol>(</symbol><local>some_data</local><symbol>,</symbol> <local>should_compare_objects</local><symbol>)</symbol>
		<keyword>ensure</keyword>
			<tag>not_found_in_empty</tag><symbol>:</symbol> <keyword>Result</keyword> <symbol>/=</symbol> <keyword>Void</keyword> <keyword>implies</keyword> <keyword>not</keyword> <feature><include>False</include>is_empty</feature>
			<tag>index_not_changed</tag><symbol>:</symbol> <keyword>old</keyword> <feature><location>../interface/ev_dynamic_list.xml#f_index</location>index</feature> <symbol>=</symbol> <feature><location>../interface/ev_dynamic_list.xml#f_index</location>index</feature>
		<keyword>end</keyword>

	<anchor>f_retrieve_items_recursively_by_data</anchor><feature><location>../interface/ev_tree_node_list.xml#f_retrieve_items_recursively_by_data</location>retrieve_items_recursively_by_data</feature> <symbol>(</symbol><local>some_data</local><symbol>:</symbol> <class><include>False</include>ANY</class><symbol>;</symbol> <local>should_compare_objects</local><symbol>:</symbol> <class><include>False</include>BOOLEAN</class><symbol>)</symbol><symbol>:</symbol> <class><include>False</include>ARRAYED_LIST</class> <symbol>[</symbol><class><location>../interface/ev_tree_node.xml</location>EV_TREE_NODE</class><symbol>]</symbol>
			<comment>--</comment><comment> </comment><quoted>Result</quoted><comment> is all tree items contained in </comment><quoted>Current</quoted><comment> at any level</comment>
			<comment>--</comment><comment> with data matching </comment><quoted>some_data</quoted><comment>. Compare objects if</comment>
			<comment>--</comment><comment> </comment><quoted>should_compare_objects</quoted><comment> otherwise compare references.</comment>
		<keyword>do</keyword>
			<keyword>Result</keyword> <symbol>:=</symbol> <feature><location>../interface/ev_tree_node_list.xml#f_implementation</location>implementation</feature><dot>.</dot><feature><location>../implementation_interface/ev_tree_node_list_i.xml#f_retrieve_items_recursively_by_data</location>retrieve_items_recursively_by_data</feature><symbol> </symbol><symbol>(</symbol><local>some_data</local><symbol>,</symbol> <local>should_compare_objects</local><symbol>)</symbol>
		<keyword>ensure</keyword>
			<tag>result_not_void</tag><symbol>:</symbol> <keyword>Result</keyword> <symbol>/=</symbol> <keyword>Void</keyword>
			<tag>not_found_in_empty</tag><symbol>:</symbol> <keyword>not</keyword> <keyword>Result</keyword><dot>.</dot><feature><include>False</include>is_empty</feature> <keyword>implies</keyword> <keyword>not</keyword> <feature><include>False</include>is_empty</feature>
			<tag>index_not_changed</tag><symbol>:</symbol> <keyword>old</keyword> <feature><location>../interface/ev_dynamic_list.xml#f_index</location>index</feature> <symbol>=</symbol> <feature><location>../interface/ev_dynamic_list.xml#f_index</location>index</feature>
		<keyword>end</keyword>

	<anchor>f_has_recursively</anchor><feature><location>../interface/ev_tree_node_list.xml#f_has_recursively</location>has_recursively</feature> <symbol>(</symbol><local>an_item</local><symbol>:</symbol> <class><location>../interface/ev_tree_node.xml</location>EV_TREE_NODE</class><symbol>)</symbol><symbol>:</symbol> <class><include>False</include>BOOLEAN</class>
			<comment>--</comment><comment> Is </comment><quoted>an_item</quoted><comment> contained in </comment><quoted>Current</quoted><comment> at any level?</comment>
		<keyword>require</keyword>
			<tag>item_not_void</tag><symbol>:</symbol> <local>an_item</local> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>do</keyword>
			<keyword>Result</keyword> <symbol>:=</symbol> <feature><location>../interface/ev_tree_node_list.xml#f_implementation</location>implementation</feature><dot>.</dot><feature><location>../implementation_interface/ev_tree_node_list_i.xml#f_has_recursively</location>has_recursively</feature><symbol> </symbol><symbol>(</symbol><local>an_item</local><symbol>)</symbol>
		<keyword>ensure</keyword>
			<tag>not_found_in_empty</tag><symbol>:</symbol> <keyword>Result</keyword> <keyword>implies</keyword> <keyword>not</keyword> <feature><include>False</include>is_empty</feature>
			<tag>index_not_changed</tag><symbol>:</symbol> <keyword>old</keyword> <feature><location>../interface/ev_dynamic_list.xml#f_index</location>index</feature> <symbol>=</symbol> <feature><location>../interface/ev_dynamic_list.xml#f_index</location>index</feature>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <comment>--</comment><comment> Basic operation</comment>

	<anchor>f_recursive_do_all</anchor><feature><location>../interface/ev_tree_node_list.xml#f_recursive_do_all</location>recursive_do_all</feature> <symbol>(</symbol><local>action</local><symbol>:</symbol> <class><include>False</include>PROCEDURE</class> <symbol>[</symbol><class><location>../interface/ev_tree_node.xml</location>EV_TREE_NODE</class><symbol>]</symbol><symbol>)</symbol>
			<comment>--</comment><comment> Apply </comment><quoted>action</quoted><comment> to every item.</comment>
			<comment>--</comment><comment> Semantics not guaranteed if </comment><quoted>action</quoted><comment> changes the structure;</comment>
		<keyword>require</keyword>
			<tag>action_not_void</tag><symbol>:</symbol> <local>action</local> <symbol>/=</symbol> <keyword>Void</keyword>
		<keyword>do</keyword>
			<feature><location>../interface/ev_tree_node_list.xml#f_implementation</location>implementation</feature><dot>.</dot><feature><location>../implementation_interface/ev_tree_node_list_i.xml#f_recursive_do_all</location>recursive_do_all</feature><symbol> </symbol><symbol>(</symbol><local>action</local><symbol>)</symbol>
		<keyword>end</keyword>
	
<keyword>feature</keyword> <symbol>{</symbol><class><location>../interface/ev_any.xml</location>EV_ANY</class><symbol>,</symbol> <class><location>../implementation_interface/ev_any_i.xml</location>EV_ANY_I</class><symbol>}</symbol> <comment>--</comment><comment> Implementation</comment>

	<anchor>f_implementation</anchor><feature><location>../interface/ev_tree_node_list.xml#f_implementation</location>implementation</feature><symbol>:</symbol> <class><location>../implementation_interface/ev_tree_node_list_i.xml</location>EV_TREE_NODE_LIST_I</class>
			<comment>--</comment><comment> Responsible for interaction with native graphics toolkit.</comment>
	
<keyword>note</keyword>
	<indexing_tag>copyright</indexing_tag><symbol>:</symbol> <string>&quot;Copyright (c) 1984-2006, Eiffel Software and others&quot;</string>
	<indexing_tag>license</indexing_tag><symbol>:</symbol> <string>&quot;Eiffel Forum License v2 (see </string><string><location>http://www.eiffel.com/licensing/forum.txt</location>http://www.eiffel.com/licensing/forum.txt</string><string>)&quot;</string>
	<indexing_tag>source</indexing_tag><symbol>:</symbol> <string>&quot;</string><string>[</string>
		<string>Eiffel Software</string>
		<string>356 Storke Road, Goleta, CA 93117 USA</string>
		<string>Telephone 805-685-1006, Fax 805-685-6869</string>
		<string>Website </string><string><location>http://www.eiffel.com</location>http://www.eiffel.com</string>
		<string>Customer support </string><string><location>http://support.eiffel.com</location>http://support.eiffel.com</string>
	<string>]</string><string>&quot;</string>

<keyword>end</keyword> <comment>--</comment> <comment>class </comment><class><location>../interface/ev_tree_node_list.xml</location>EV_TREE_NODE_LIST</class></system>

